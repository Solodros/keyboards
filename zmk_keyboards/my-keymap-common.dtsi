#include <behaviors.dtsi>
#include <behaviors/radial_controller.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>

// extra key code
//--------------------------------------------

// Apple Vendor Top Case - keyboard fn
#define APPLE_FN (0x00ff0003)
// System Control - Do not disturb
#define SC_DND (0x0080009b)

// common layers
//--------------------------------------------

#define _MAC_BASE_LAYER 0
#define _WIN_BASE_LAYER 1
#define _HHKB_FN_LAYER 2
#define _APPLE_FN_LAYER 3
#define _WIN_FN_LAYER 4
#define _SETTING_LAYER 5
#define _L_THUMB_LAYER 6
#define _R_THUMB_LAYER 7

// key definitions other than kp/trans behavior
//--------------------------------------------

// mod + lang2 + lang1
// hold   mod
// single tap LANG2(英数)
// double tap LANG1(かな)
#define _MOD_LANG(mod) &mod_lang21 mod 0

// mod + spacemacs leader key
// hold   mod
// single tap spacemacs leader key
#define _MOD_EMACS(mod) &mt mod RA(M)

// keychron DIP SW
// off: mac base layer
// on: win base layer
#define _DIP_SW &kc_dip_sw

// select mac base layer
// normal: mac
// +shift: win
#define _MAC_WIN &mac_win

// Left Opt on mac base layer for HHKB layout
// single: Left Option
// double: fn/globe with momentaly apple fn layer
#define _H_M_LOPT &hhkb_mac_l_opt

// Left Opt on mac base layer for HHKB layout
// single: Left Option
// double: momentary win fn layer
#define _H_W_LOPT &hhkb_win_l_opt

// Left Command
// tap: spacemacs leader key
// hold: Left Command
#define _LCMD _MOD_EMACS(LCMD)

// Right Command
// tap: LANG2(英数)
// double tap: LANG1(かな)
// hold: Left Command
#define _RCMD _MOD_LANG(RCMD)

// Right Opt for HHKB layout
// single: Right Option
// double: Momentaly setting layer
#define _H_ROPT &hhkb_r_opt

// Right Shift for corne keyboard
// single: Left Shift
// double: Momentaly setting layer
#define _C_LSHFT &corne_l_shift

// Right Shift for corne keyboard
// single: Right Shift
// double: Momentaly setting layer
#define _C_RSHFT &corne_r_shift

// Left Enter for corne keyboard
// hold: Momentaly L Thumb layer
// tap: ENTER
#define _C_LENT &qlt _L_THUMB_LAYER ENTER

// Right SPACE for corne keyboard
// hold: Momentaly R Thumb layer
// tap: ENTER
#define _C_RSPC &qlt _R_THUMB_LAYER SPC

// HHKB fn
#define _H_FN &mo _HHKB_FN_LAYER

// Fn/Globe key with momnetary Apple Fn Layer
#define _A_FN &fn_globe

// Fn/Globe key on win base layer
#define _W_FN &mo _WIN_FN_LAYER

// APP key for ANSI/TSANGAN layout
// single: APP
// double: Momentaly setting layer
#define _APP &ansi_app

// Spotlight key on apple fn Layer
#define _SPOTLIGHT &de_fn_kp C_AC_SEARCH

// Dictation key on apple fn Layer
#define _DICTATION &de_fn_kp C_VOICE_COMMAND

// Do Not Disturb on apple fn Layer
#define _DND &de_fn_kp SC_DND

// soft off
//--------------------------------------------
#define _SOFT_OFF &soft_off_on_release

// ext_power
//--------------------------------------------

// TODO dosen't work on split right side
#define _EP &ep_sw

#define _EP_ON &ext_power EP_ON
#define _EP_OFF &ext_power EP_OFF

// underglow
//--------------------------------------------

#define _RGB &rgb_sw
#define _BRT &rgb_brt
#define _HUE &rgb_hue
#define _SAT &rgb_sat
#define _SPD &rgb_spd
#define _EFT &rgb_eft

/* #define _RGB_ON &rgb_ug RGB_ON */
/* #define _RGB_OFF &rgb_ug RGB_OFF */
/* #define _RGB_BRI &rgb_ug RGB_BRI */
/* #define _RGB_BRD &rgb_ug RGB_BRD */
/* #define _RGB_HUI &rgb_ug RGB_HUI */
/* #define _RGB_HUD &rgb_ug RGB_HUD */
/* #define _RGB_SAI &rgb_ug RGB_SAI */
/* #define _RGB_SAD &rgb_ug RGB_SAD */
/* #define _RGB_SPI &rgb_ug RGB_SPI */
/* #define _RGB_SPD &rgb_ug RGB_SPD */
/* #define _RGB_EFF &rgb_ug RGB_EFF */
/* #define _RGB_EFR &rgb_ug RGB_EFR */

// Emulate fn/globe shortcut keys for windows
//--------------------------------------------

// F1 : decrease brightness
// F2 : decrease brightness
// F3 : mission cntrol
// F4 : spotlight
// F5 : dictation, long press for "Hey Siri"
// F6 : do not disturb TODO
// F7 : media prev
// F8 : media play/pause
// F9 : media next
// F10 : mute audio
// F11 : decrease audio volume
// F12 : increase audio volume
// SPC : Hey Siri -> Copilot
// Q : Quck Notes
// E : Emoji & Symbols
// A : Focus Dock
// F : Full Screen Mode
// H : Show Desktop
// C : Show Control Center
// N : Show Notification
// M : Focus Menubar
// Backspace: Forward delete
// Right : Scroll to the end of a documen
// Left :  Scroll to the beginning of a document
// Down : Scroll down one page
// UP : Scroll up one page
#define _FN_F1 &kp C_BRI_DN
#define _FN_F2 &kp C_BRI_UP
#define _FN_F3 &kp RG(TAB)
#define _FN_F4 &kp RA(SPC)
#define _FN_F5 &kp RG(H)
#define _FN_F6 &kp F6
#define _FN_F7 &kp C_PREV
#define _FN_F8 &kp C_PP
#define _FN_F9 &kp C_NEXT
#define _FN_F10 &kp C_MUTE
#define _FN_F11 &kp C_VOL_DN
#define _FN_F12 &kp C_VOL_UP
#define _FN_SPC &kp RG(C)
#define _FN_Q &kp RG(RA(N))
#define _FN_E &kp RG(DOT)
#define _FN_A &kp RG(B)
#define _FN_F &kp F11
#define _FN_H &kp RG(COMMA)
#define _FN_C &kp RG(A)
#define _FN_N &kp RG(N)
#define _FN_M &kp RALT
#define _FN_BS &kp DEL
#define _FN_RIGHT &kp KC_END
#define _FN_LEFT &kp KC_HOME
#define _FN_DOWN &kp KC_PGDN
#define _FN_UP &kp KC_PGUP

// select output
//--------------------------------------------

#define _BT_MAC1 &ble 0 _MAC_BASE_LAYER
#define _BT_MAC2 &ble 1 _MAC_BASE_LAYER
#define _BT_WIN1 &ble 2 _WIN_BASE_LAYER
#define _BT_MAC3 &ble 3 _MAC_BASE_LAYER
#define _BT_WIN2 &ble 4 _WIN_BASE_LAYER
#define _BT_OFF0 &bt BT_DISC 0
#define _BT_OFF1 &bt BT_DISC 1
#define _BT_OFF2 &bt BT_DISC 2
#define _BT_OFF3 &bt BT_DISC 3
#define _BT_OFF4 &bt BT_DISC 4
#define _BT_CLR &bt BT_CLR
#define _BT_CLR_ALL &bt BT_CLR_ALL
#define _USB &out OUT_USB

// macro / behavior
//--------------------------------------------

/ {
  behaviors {
    /omit-if-no-ref/ qlt: quick_layer_tap {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "hold-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      retro-tap;
      bindings = <&mo>, <&kp>;
    };

    // single tap -> LANG2(英数)
    // double tap -> LANG1(かな)
    /omit-if-no-ref/ lang21: lang21 {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LANG2>, <&kp LANG1>;
    };

    // hold -> param 1
    // single tap -> LANG2(英数)
    // double tap -> LANG1(かな)
    /omit-if-no-ref/ mod_lang21: mod_lang21 {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&lang21>;
      retro-tap;
    };

    // Left Option key on mac base layer for HHKB layout
    // single -> LALT
    // double -> APPLE_FNn + MO(_MAC_FN_LAYER)
    /omit-if-no-ref/ hhkb_mac_l_opt: hhkb_mac_l_opt {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LALT>, <&fn_globe>;
    };
    // Left Option key on win base layer for HHKB layout
    // single -> LALT
    // double -> MO(_WIN_FN_LAYER)
    /omit-if-no-ref/ hhkb_win_l_opt: hhkb_win_l_opt {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LALT>, <&mo _WIN_FN_LAYER>;
    };
    // single -> RALT
    // double -> MO(_SETTING_LAYER)
    /omit-if-no-ref/ hhkb_r_opt: hhkb_r_opt {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp RALT>, <&mo _SETTING_LAYER>;
    };
    // single -> RSHFT
    // double -> MO(_SETTING_LAYER)
    /omit-if-no-ref/ corne_l_shift: corne_l_shift {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LSHFT>, <&mo _SETTING_LAYER>;
    };
    // single -> RSHFT
    // double -> MO(_SETTING_LAYER)
    /omit-if-no-ref/ corne_r_shift: corne_r_shift {
        compatible = "zmk,behavior-tap-dance";
        #binding-cells = <0>;
        tapping-term-ms = <200>;
        bindings = <&kp RSHFT>, <&mo _SETTING_LAYER>;
    };
    // single -> APP
    // double -> MO(3)
    /omit-if-no-ref/ ansi_app: ansi_app {
      compatible = "zmk,behavior-tap-dance";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp K_APP>, <&mo _SETTING_LAYER>;
    };
    /omit-if-no-ref/ ota_bootloader: ota_bootloader {
      compatible = "zmk,behavior-reset";
      type = <0xA8>;
      #binding-cells = <0>;
    };
    /omit-if-no-ref/ mac_win: switch_mac_win {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&to _MAC_BASE_LAYER>, <&to _WIN_BASE_LAYER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };

    /omit-if-no-ref/ ep_sw: switch_ext_power {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&ext_power EP_ON>, <&ext_power EP_OFF>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_sw: switch_rgb {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_ON>, <&rgb_ug RGB_OFF>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_brt: adjust_rgb_brt {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_hue: adjust_rgb_hue {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_HUI>, <&rgb_ug RGB_HUD>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_sat: adjust_rgb_sat {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_SAI>, <&rgb_ug RGB_SAD>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_spd: adjust_rgb_spd {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_SPI>, <&rgb_ug RGB_SPD>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    /omit-if-no-ref/ rgb_eft: adjust_rgb_eft {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&rgb_ug RGB_EFF>, <&rgb_ug RGB_EFR>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
  };

  macros {
    // Select BT profile & output
    // param_1: index number(0-4) of bt profile
    // param_2: base layer
    /omit-if-no-ref/ ble: ble {
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <2>;
      bindings
      = <&macro_param_1to2>
      , <&macro_tap &bt BT_SEL MACRO_PLACEHOLDER>
      , <&macro_tap &out OUT_BLE>
      , <&macro_param_2to1>
      , <&macro_tap &to MACRO_PLACEHOLDER>
      ;
    };
    // fn_globe key with momentaly apple fn layer
    /omit-if-no-ref/ fn_globe: fn_globe {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
      = <&macro_press &mo _APPLE_FN_LAYER &kp APPLE_FN>
      , <&macro_pause_for_release>
      , <&macro_release &mo _APPLE_FN_LAYER &kp APPLE_FN>
      ;
    };
    // send key with temporarily releasing fn/globe
    //  *some consumer or system control keys dosen't work with fn/globe key
    // param_1: keycode
    /omit-if-no-ref/ de_fn_kp: de_fn_kp {
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      bindings
      = <&macro_release &kp APPLE_FN>
      , <&macro_param_1to1>
      , <&macro_press &kp MACRO_PLACEHOLDER>
      , <&macro_press &kp APPLE_FN>
      , <&macro_pause_for_release>
      , <&macro_param_1to1>
      , <&macro_release &kp MACRO_PLACEHOLDER>
      ;
    };
    // keychron dip-sw
    /omit-if-no-ref/ kc_dip_sw: kc_dip_sw {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings
      = <&macro_tap &to _WIN_BASE_LAYER>
      , <&macro_pause_for_release>
      , <&macro_tap &to _MAC_BASE_LAYER>
      ;
    };
  };

  /omit-if-no-ref/ volume_encoder: volume_encoder {
    compatible = "zmk,behavior-sensor-rotate";
    #sensor-binding-cells = <0>;
    bindings = <&kp C_VOL_UP>, <&kp C_VOL_DN>;
  };
  // radial controller
  /omit-if-no-ref/ radial_controller: radial_controller {
    compatible = "zmk,behavior-sensor-rotate";
    #sensor-binding-cells = <0>;
    bindings = <&rc_cw>, <&rc_ccw>;
  };
  // radial controller 1/4 fine
  /omit-if-no-ref/ radial_controller_fine: radial_controller_fine {
    compatible = "zmk,behavior-sensor-rotate";
    #sensor-binding-cells = <0>;
    bindings = <&rc_cw_fine>, <&rc_ccw_fine>;
  };
  /omit-if-no-ref/ trans_encoder: trans_encoder {
    compatible = "zmk,behavior-sensor-rotate";
    #sensor-binding-cells = <0>;
    bindings = <&trans>, <&trans>;
  };

  /omit-if-no-ref/ soft_off_on_release: soft_off_on_release {
    compatible = "zmk,behavior-soft-off";
    #binding-cells = <0>;
  };

};
