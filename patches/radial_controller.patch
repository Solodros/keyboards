diff --git a/builddefs/common_features.mk b/builddefs/common_features.mk
index cb2ab3d778..faf424eb19 100644
--- a/builddefs/common_features.mk
+++ b/builddefs/common_features.mk
@@ -908,3 +908,7 @@ ifeq ($(strip $(ENCODER_ENABLE)), yes)
         OPT_DEFS += -DENCODER_MAP_ENABLE
     endif
 endif
+
+ifeq ($(strip $(RADIAL_CONTROLLER_ENABLE)), yes)
+    OPT_DEFS += -DRADIAL_CONTROLLER_ENABLE
+endif
diff --git a/tmk_core/protocol.mk b/tmk_core/protocol.mk
index 19fd7d2425..62dd1c415e 100644
--- a/tmk_core/protocol.mk
+++ b/tmk_core/protocol.mk
@@ -81,6 +81,10 @@ ifeq ($(strip $(DIGITIZER_ENABLE)), yes)
     endif
 endif

+ifeq ($(strip $(RADIAL_CONTROLLER_ENABLE)), yes)
+    TMK_COMMON_DEFS += -DRADIAL_CONTROLLER_ENABLE
+endif
+
 ifeq ($(strip $(SHARED_EP_ENABLE)), yes)
     TMK_COMMON_DEFS += -DSHARED_EP_ENABLE
 endif
diff --git a/tmk_core/protocol/chibios/usb_main.c b/tmk_core/protocol/chibios/usb_main.c
index eb9ef82554..4536394fe8 100644
--- a/tmk_core/protocol/chibios/usb_main.c
+++ b/tmk_core/protocol/chibios/usb_main.c
@@ -324,6 +324,9 @@ typedef struct {
 #endif
 #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
             usb_driver_config_t digitizer_driver;
+#endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+            usb_driver_config_t radial_controller_driver;
 #endif
         };
         usb_driver_config_t array[0];
@@ -381,6 +384,14 @@ static usb_driver_configs_t drivers = {
 #    define DIGITIZER_OUT_MODE USB_EP_MODE_TYPE_BULK
     .digitizer_driver = QMK_USB_DRIVER_CONFIG(DIGITIZER, 0, false),
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+#    define RADIAL_CONTROLLER_IN_CAPACITY 4
+#    define RADIAL_CONTROLLER_OUT_CAPACITY 4
+#    define RADIAL_CONTROLLER_IN_MODE USB_EP_MODE_TYPE_BULK
+#    define RADIAL_CONTROLLER_OUT_MODE USB_EP_MODE_TYPE_BULK
+    .radial_controller_driver = QMK_USB_DRIVER_CONFIG(RADIAL_CONTROLLER, 0, false),
+#endif
 };

 #define NUM_USB_DRIVERS (sizeof(drivers) / sizeof(usb_driver_config_t))
@@ -1031,6 +1042,12 @@ void send_digitizer(report_digitizer_t *report) {
 #endif
 }

+void send_radial_controller(report_radial_controller_t *report) {
+#ifdef RADIAL_CONTROLLER_ENABLE
+    chnWrite(&drivers.radial_controller_driver.driver, (uint8_t *)report, sizeof(report_radial_controller_t));
+#endif
+}
+
 /* ---------------------------------------------------------
  *                   Console functions
  * ---------------------------------------------------------
diff --git a/tmk_core/protocol/host.c b/tmk_core/protocol/host.c
index 3d8604d541..69c75752b5 100644
--- a/tmk_core/protocol/host.c
+++ b/tmk_core/protocol/host.c
@@ -144,6 +144,13 @@ void host_programmable_button_send(uint32_t report) {
     (*driver->send_programmable_button)(report);
 }

+void host_radial_controller_send(report_radial_controller_t *report) {
+    if (!driver) return;
+    send_radial_controller(report);
+}
+
+__attribute__((weak)) void send_radial_controller(report_radial_controller_t *report) {}
+
 uint16_t host_last_system_report(void) {
     return last_system_report;
 }
diff --git a/tmk_core/protocol/host.h b/tmk_core/protocol/host.h
index 6b15f0d0c1..7483cba7fc 100644
--- a/tmk_core/protocol/host.h
+++ b/tmk_core/protocol/host.h
@@ -48,6 +48,7 @@ void    host_mouse_send(report_mouse_t *report);
 void    host_system_send(uint16_t data);
 void    host_consumer_send(uint16_t data);
 void    host_programmable_button_send(uint32_t data);
+void    host_radial_controller_send(report_radial_controller_t *report);

 uint16_t host_last_system_report(void);
 uint16_t host_last_consumer_report(void);
diff --git a/tmk_core/protocol/host_driver.h b/tmk_core/protocol/host_driver.h
index affd0dcb34..5d6d170161 100644
--- a/tmk_core/protocol/host_driver.h
+++ b/tmk_core/protocol/host_driver.h
@@ -36,0 +36,1 @@ void send_digitizer(report_digitizer_t *report);
+void send_radial_controller(report_radial_controller_t *report);
diff --git a/tmk_core/protocol/lufa/lufa.c b/tmk_core/protocol/lufa/lufa.c
index b4b03357a3..ebdf99d9e6 100644
--- a/tmk_core/protocol/lufa/lufa.c
+++ b/tmk_core/protocol/lufa/lufa.c
@@ -502,6 +502,11 @@ void EVENT_USB_Device_ConfigurationChanged(void) {
     ConfigSuccess &= Endpoint_ConfigureEndpoint((DIGITIZER_IN_EPNUM | ENDPOINT_DIR_IN), EP_TYPE_INTERRUPT, DIGITIZER_EPSIZE, 1);
 #endif

+#ifdef RADIAL_CONTROLLER_ENABLE
+    /* Setup Radial Controller endpoint */
+    ConfigSuccess &= Endpoint_ConfigureEndpoint((RADIAL_CONTROLLER_IN_EPNUM | ENDPOINT_DIR_IN), EP_TYPE_INTERRUPT, RADIAL_CONTROLLER_EPSIZE, 1);
+#endif
+
     usb_device_state_set_configuration(USB_DeviceState == DEVICE_STATE_Configured, USB_Device_ConfigurationNumber);
 }

@@ -980,6 +985,24 @@ void send_digitizer(report_digitizer_t *report) {
 #endif
 }

+void send_radial_controller(report_radial_controller_t *report) {
+#ifdef RADIAL_CONTROLLER_ENABLE
+    uint8_t timeout = 255;
+
+    if (USB_DeviceState != DEVICE_STATE_Configured) return;
+
+    Endpoint_SelectEndpoint(RADIAL_CONTROLLER_IN_EPNUM);
+
+    /* Check if write ready for a polling interval around 10ms */
+    while (timeout-- && !Endpoint_IsReadWriteAllowed())
+        _delay_us(40);
+    if (!Endpoint_IsReadWriteAllowed()) return;
+
+    Endpoint_Write_Stream_LE(report, sizeof(report_radial_controller_t), NULL);
+    Endpoint_ClearIN();
+#endif
+}
+
 /*******************************************************************************
  * main
  ******************************************************************************/
diff --git a/tmk_core/protocol/report.h b/tmk_core/protocol/report.h
index 735ccdb4a1..c291ab20ad 100644
--- a/tmk_core/protocol/report.h
+++ b/tmk_core/protocol/report.h
@@ -233,6 +233,11 @@ typedef struct {
     uint16_t y;
 } __attribute__((packed)) report_digitizer_t;

+typedef struct  {
+    uint16_t button : 1;
+    int16_t dial : 15;
+} __attribute__ ((packed)) report_radial_controller_t;
+
 typedef struct {
 #if JOYSTICK_AXES_COUNT > 0
 #    if JOYSTICK_AXES_RESOLUTION > 8
diff --git a/tmk_core/protocol/usb_descriptor.c b/tmk_core/protocol/usb_descriptor.c
index 21795cef60..115a1f8755 100644
--- a/tmk_core/protocol/usb_descriptor.c
+++ b/tmk_core/protocol/usb_descriptor.c
@@ -310,7 +310,39 @@ const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
     HID_RI_END_COLLECTION(0),
 #endif

-#ifdef SHARED_EP_ENABLE
+#if defined(SHARED_EP_ENABLE)
+};
+#endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+const USB_Descriptor_HIDReport_Datatype_t PROGMEM RadialControllerReport[] = {
+    HID_RI_USAGE_PAGE(8, 0x01),             // Generic Desktop
+    HID_RI_USAGE(8, 0x0E),                  // System Multi-Axis Controller
+    HID_RI_COLLECTION(8, 0x01),             // Application
+        HID_RI_USAGE_PAGE(8, 0x0D),
+        HID_RI_USAGE(8, 0x21),              // Puck
+        HID_RI_COLLECTION(8, 0x00),         // Physical
+            HID_RI_USAGE_PAGE(8, 0x09),     // Buttons
+            HID_RI_USAGE(8, 0x01),          // Button 1
+            HID_RI_LOGICAL_MINIMUM(8, 0x00),
+            HID_RI_LOGICAL_MAXIMUM(8, 0x01),
+            HID_RI_REPORT_COUNT(8, 1),
+            HID_RI_REPORT_SIZE(8, 1),
+            HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
+
+            HID_RI_USAGE_PAGE(8, 0x01),     // Generic Desktop
+            HID_RI_USAGE(8, 0x37),          // Dial
+            HID_RI_UNIT_EXPONENT(8, 0x0F),
+            HID_RI_UNIT(8, 0x14),
+            HID_RI_PHYSICAL_MINIMUM(16, 0xF1F0),
+            HID_RI_PHYSICAL_MAXIMUM(16, 0x0E10),
+            HID_RI_LOGICAL_MINIMUM(16, 0xF1F0),
+            HID_RI_LOGICAL_MAXIMUM(16, 0x0E10),
+            HID_RI_REPORT_COUNT(8, 1),
+            HID_RI_REPORT_SIZE(8, 15),
+            HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
+        HID_RI_END_COLLECTION(0),
+    HID_RI_END_COLLECTION(0),
 };
 #endif

@@ -1039,6 +1071,46 @@ const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
     },
 #endif
+
+    /*
+     * Radial Controller
+     */
+#ifdef RADIAL_CONTROLLER_ENABLE
+    .RadialController_Interface = {
+        .Header = {
+            .Size               = sizeof(USB_Descriptor_Interface_t),
+            .Type               = DTYPE_Interface
+        },
+        .InterfaceNumber        = RADIAL_CONTROLLER_INTERFACE,
+        .AlternateSetting       = 0x00,
+        .TotalEndpoints         = 1,
+        .Class                  = HID_CSCP_HIDClass,
+        .SubClass               = HID_CSCP_NonBootSubclass,
+        .Protocol               = HID_CSCP_NonBootProtocol,
+        .InterfaceStrIndex      = NO_DESCRIPTOR
+    },
+    .RadialController_HID = {
+        .Header = {
+            .Size               = sizeof(USB_HID_Descriptor_HID_t),
+            .Type               = HID_DTYPE_HID
+        },
+        .HIDSpec                = VERSION_BCD(1, 1, 1),
+        .CountryCode            = 0x00,
+        .TotalReportDescriptors = 1,
+        .HIDReportType          = HID_DTYPE_Report,
+        .HIDReportLength        = sizeof(RadialControllerReport)
+    },
+    .RadialController_INEndpoint = {
+        .Header = {
+            .Size               = sizeof(USB_Descriptor_Endpoint_t),
+            .Type               = DTYPE_Endpoint
+        },
+        .EndpointAddress        = (ENDPOINT_DIR_IN | RADIAL_CONTROLLER_IN_EPNUM),
+        .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
+        .EndpointSize           = RADIAL_CONTROLLER_EPSIZE,
+        .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
+    }
+#endif
 };

 /*
@@ -1184,6 +1256,12 @@ uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const

                     break;
 #endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+                case RADIAL_CONTROLLER_INTERFACE:
+                    Address = &ConfigurationDescriptor.RadialController_HID;
+                    Size    = sizeof(USB_HID_Descriptor_HID_t);
+                    break;
+#endif
             }

             break;
@@ -1239,6 +1317,12 @@ uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const
                     Address = &DigitizerReport;
                     Size    = sizeof(DigitizerReport);
                     break;
+#endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+                case RADIAL_CONTROLLER_INTERFACE:
+                    Address = &RadialControllerReport;
+                    Size    = sizeof(RadialControllerReport);
+                    break;
 #endif
             }

diff --git a/tmk_core/protocol/usb_descriptor.h b/tmk_core/protocol/usb_descriptor.h
index f8b7a863aa..bd991341fa 100644
--- a/tmk_core/protocol/usb_descriptor.h
+++ b/tmk_core/protocol/usb_descriptor.h
@@ -145,6 +145,13 @@ typedef struct {
     USB_HID_Descriptor_HID_t   Digitizer_HID;
     USB_Descriptor_Endpoint_t  Digitizer_INEndpoint;
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    // Radial COntroller HID Interface
+    USB_Descriptor_Interface_t RadialController_Interface;
+    USB_HID_Descriptor_HID_t   RadialController_HID;
+    USB_Descriptor_Endpoint_t  RadialController_INEndpoint;
+#endif
 } USB_Descriptor_Configuration_t;

 /*
@@ -194,6 +201,10 @@ enum usb_interfaces {
 #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
     DIGITIZER_INTERFACE,
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    RADIAL_CONTROLLER_INTERFACE,
+#endif
     TOTAL_INTERFACES
 };

@@ -286,6 +297,15 @@ enum usb_endpoints {
 #        define DIGITIZER_IN_EPNUM SHARED_IN_EPNUM
 #    endif
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    RADIAL_CONTROLLER_IN_EPNUM = NEXT_EPNUM,
+#    ifdef USB_ENDPOINTS_ARE_REORDERABLE
+    RADIAL_CONTROLLER_OUT_EPNUM = RADIAL_CONTROLLER_IN_EPNUM,
+#    else
+    RADIAL_CONTROLLER_OUT_EPNUM = NEXT_EPNUM,
+#    endif
+#endif
 };

 #ifdef PROTOCOL_LUFA
@@ -312,5 +332,6 @@ enum usb_endpoints {
 #define CDC_EPSIZE 16
 #define JOYSTICK_EPSIZE 8
 #define DIGITIZER_EPSIZE 8
+#define RADIAL_CONTROLLER_EPSIZE 8

 uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const void** const DescriptorAddress);
