diff --git a/app/include/zmk/hid.h b/app/include/zmk/hid.h
index ab42ada..8be9409 100644
--- a/app/include/zmk/hid.h
+++ b/app/include/zmk/hid.h
@@ -13,7 +13,13 @@
 #include <dt-bindings/zmk/hid_usage.h>
 #include <dt-bindings/zmk/hid_usage_pages.h>
 
-#define ZMK_HID_KEYBOARD_NKRO_MAX_USAGE HID_USAGE_KEY_KEYPAD_EQUAL
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+#include <zmk/evil/hid_extra_keys.h>
+#endif
+
+#if IS_ENABLED(CONFIG_ZMK_HID_REPORT_TYPE_NKRO)
+#define ZMK_HID_KEYBOARD_NKRO_MAX_USAGE CONFIG_ZMK_HID_KEYBOARD_NKRO_MAX_USAGE
+#endif
 
 #define COLLECTION_REPORT 0x03
 
@@ -33,11 +39,15 @@ static const uint8_t zmk_hid_report_desc[] = {
     /* INPUT (Data,Var,Abs) */
     HID_INPUT(0x02),
 
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    HID_EXTRA_KEYS_DESC,
+#else
     HID_USAGE_PAGE(HID_USAGE_KEY),
     HID_REPORT_SIZE(0x08),
     HID_REPORT_COUNT(0x01),
     /* INPUT (Cnst,Var,Abs) */
     HID_INPUT(0x03),
+#endif
 
     HID_USAGE_PAGE(HID_USAGE_KEY),
 
@@ -100,7 +110,7 @@ static const uint8_t zmk_hid_report_desc[] = {
 
 struct zmk_hid_keyboard_report_body {
     zmk_mod_flags_t modifiers;
-    uint8_t _reserved;
+    uint8_t extra_keys;
 #if IS_ENABLED(CONFIG_ZMK_HID_REPORT_TYPE_NKRO)
     uint8_t keys[(ZMK_HID_KEYBOARD_NKRO_MAX_USAGE + 1) / 8];
 #elif IS_ENABLED(CONFIG_ZMK_HID_REPORT_TYPE_HKRO)
diff --git a/app/src/endpoints.c b/app/src/endpoints.c
index 378a4b7..fac5cee 100644
--- a/app/src/endpoints.c
+++ b/app/src/endpoints.c
@@ -189,6 +189,11 @@ int zmk_endpoints_send_report(uint16_t usage_page) {
         return send_consumer_report();
     }
 
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    if (zmk_hid_extra_keys_contains_usage_page(usage_page))
+        return send_keyboard_report();
+#endif
+
     LOG_ERR("Unsupported usage page %d", usage_page);
     return -ENOTSUP;
 }
diff --git a/app/src/hid.c b/app/src/hid.c
index 2a6b5d3..3188ed5 100644
--- a/app/src/hid.c
+++ b/app/src/hid.c
@@ -12,7 +12,7 @@ LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
 #include <dt-bindings/zmk/modifiers.h>
 
 static struct zmk_hid_keyboard_report keyboard_report = {
-    .report_id = 1, .body = {.modifiers = 0, ._reserved = 0, .keys = {0}}};
+    .report_id = 1, .body = {.modifiers = 0, .extra_keys = 0, .keys = {0}}};
 
 static struct zmk_hid_consumer_report consumer_report = {.report_id = 2, .body = {.keys = {0}}};
 
@@ -241,6 +241,13 @@ int zmk_hid_press(uint32_t usage) {
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_press(ZMK_HID_USAGE_ID(usage));
     }
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    int index = zmk_hid_extra_keys_find(usage);
+    if (index >= 0) {
+        keyboard_report.body.extra_keys |= 1 << index;
+        return 0;
+    }
+#endif
     return -EINVAL;
 }
 
@@ -251,6 +258,13 @@ int zmk_hid_release(uint32_t usage) {
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_release(ZMK_HID_USAGE_ID(usage));
     }
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    int index = zmk_hid_extra_keys_find(usage);
+    if (index >= 0) {
+        keyboard_report.body.extra_keys &= ~(1 << index);
+        return 0;
+    }
+#endif
     return -EINVAL;
 }
 
@@ -261,6 +275,11 @@ bool zmk_hid_is_pressed(uint32_t usage) {
     case HID_USAGE_CONSUMER:
         return zmk_hid_consumer_is_pressed(ZMK_HID_USAGE_ID(usage));
     }
+#if IS_ENABLED(CONFIG_ZMK_HID_EXTRA_KEYS)
+    int index = zmk_hid_extra_keys_find(usage);
+    if (index >= 0)
+        return (keyboard_report.body.extra_keys & (1 << index)) != 0;
+#endif
     return false;
 }
 
