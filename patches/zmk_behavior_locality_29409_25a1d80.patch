From bb868b875baf34cb5fd3bfb137cd9a1083e5a0b4 Mon Sep 17 00:00:00 2001
From: Tokazio <tokazio@hotmail.com>
Date: Tue, 17 Jan 2023 19:05:04 +0100
Subject: [PATCH 1/4] led color to right side

---
 app/include/zmk/keymap.h                  |  5 +++++
 app/include/zmk/split/bluetooth/central.h |  2 +-
 app/src/behavior_queue.c                  |  5 +++--
 app/src/keymap.c                          | 23 ++++++++++++++---------
 4 files changed, 23 insertions(+), 12 deletions(-)

diff --git a/app/include/zmk/keymap.h b/app/include/zmk/keymap.h
index 0d7dbaf33b3..6d3d91121a1 100644
--- a/app/include/zmk/keymap.h
+++ b/app/include/zmk/keymap.h
@@ -7,6 +7,7 @@
 #pragma once
 
 #include <zmk/events/position_state_changed.h>
+#include <zmk/behavior.h>
 
 #define ZMK_LAYER_CHILD_LEN_PLUS_ONE(node) 1 +
 #define ZMK_KEYMAP_LAYERS_LEN                                                                      \
@@ -27,6 +28,10 @@ const char *zmk_keymap_layer_name(uint8_t layer);
 int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                       int64_t timestamp);
 
+int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
+                                   struct zmk_behavior_binding_event event, uint8_t source,
+                                   bool pressed);
+
 #define ZMK_KEYMAP_EXTRACT_BINDING(idx, drv_inst)                                                  \
     {                                                                                              \
         .behavior_dev = DEVICE_DT_NAME(DT_PHANDLE_BY_IDX(drv_inst, bindings, idx)),                \
diff --git a/app/include/zmk/split/bluetooth/central.h b/app/include/zmk/split/bluetooth/central.h
index 5e9e09ff6a1..532ef4033fb 100644
--- a/app/include/zmk/split/bluetooth/central.h
+++ b/app/include/zmk/split/bluetooth/central.h
@@ -21,4 +21,4 @@ int zmk_split_bt_update_hid_indicator(zmk_hid_indicators_t indicators);
 
 int zmk_split_get_peripheral_battery_level(uint8_t source, uint8_t *level);
 
-#endif // IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_CENTRAL_BATTERY_LEVEL_FETCHING)
\ No newline at end of file
+#endif // IS_ENABLED(CONFIG_ZMK_SPLIT_BLE_CENTRAL_BATTERY_LEVEL_FETCHING)
diff --git a/app/src/behavior_queue.c b/app/src/behavior_queue.c
index 1511e755d4f..531a92cb56e 100644
--- a/app/src/behavior_queue.c
+++ b/app/src/behavior_queue.c
@@ -5,6 +5,7 @@
  */
 
 #include <zmk/behavior_queue.h>
+#include <zmk/keymap.h>
 
 #include <zephyr/kernel.h>
 #include <zephyr/logging/log.h>
@@ -35,9 +36,9 @@ static void behavior_queue_process_next(struct k_work *work) {
                                                    .timestamp = k_uptime_get()};
 
         if (item.press) {
-            behavior_keymap_binding_pressed(&item.binding, event);
+            zmk_trigger_behavior_callbacks(&item.binding, event, 0, true);
         } else {
-            behavior_keymap_binding_released(&item.binding, event);
+            zmk_trigger_behavior_callbacks(&item.binding, event, 0, false);
         }
 
         LOG_DBG("Processing next queued behavior in %dms", item.wait);
diff --git a/app/src/keymap.c b/app/src/keymap.c
index 94bd12048cf..f5a798538a2 100644
--- a/app/src/keymap.c
+++ b/app/src/keymap.c
@@ -177,7 +177,6 @@ int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position
     // We want to make a copy of this, since it may be converted from
     // relative to absolute before being invoked
     struct zmk_behavior_binding binding = zmk_keymap[layer][position];
-    const struct device *behavior;
     struct zmk_behavior_binding_event event = {
         .layer = layer,
         .position = position,
@@ -186,14 +185,20 @@ int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position
 
     LOG_DBG("layer: %d position: %d, binding name: %s", layer, position, binding.behavior_dev);
 
-    behavior = zmk_behavior_get_binding(binding.behavior_dev);
+    return zmk_trigger_behavior_callbacks(&binding, event, source, pressed);
+}
+
+int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
+                                   struct zmk_behavior_binding_event event, uint8_t source,
+                                   bool pressed) {
+    const struct device *behavior = zmk_behavior_get_binding(binding->behavior_dev);
 
     if (!behavior) {
-        LOG_WRN("No behavior assigned to %d on layer %d", position, layer);
+        LOG_WRN("No behavior assigned to %d on layer %d", event.position, event.layer);
         return 1;
     }
 
-    int err = behavior_keymap_binding_convert_central_state_dependent_params(&binding, event);
+    int err = behavior_keymap_binding_convert_central_state_dependent_params(binding, event);
     if (err) {
         LOG_ERR("Failed to convert relative to absolute behavior binding (err %d)", err);
         return err;
@@ -208,24 +213,24 @@ int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position
 
     switch (locality) {
     case BEHAVIOR_LOCALITY_CENTRAL:
-        return invoke_locally(&binding, event, pressed);
+        return invoke_locally(binding, event, pressed);
     case BEHAVIOR_LOCALITY_EVENT_SOURCE:
 #if ZMK_BLE_IS_CENTRAL
         if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
-            return invoke_locally(&binding, event, pressed);
+            return invoke_locally(binding, event, pressed);
         } else {
             return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
         }
 #else
-        return invoke_locally(&binding, event, pressed);
+        return invoke_locally(binding, event, pressed);
 #endif
     case BEHAVIOR_LOCALITY_GLOBAL:
 #if ZMK_BLE_IS_CENTRAL
         for (int i = 0; i < ZMK_SPLIT_BLE_PERIPHERAL_COUNT; i++) {
-            zmk_split_bt_invoke_behavior(i, &binding, event, pressed);
+            zmk_split_bt_invoke_behavior(i, binding, event, pressed);
         }
 #endif
-        return invoke_locally(&binding, event, pressed);
+        return invoke_locally(binding, event, pressed);
     }
 
     return -ENOTSUP;

From 6a1a3cdc4a0d78e962fe7b25cadb10f4bc6ceeae Mon Sep 17 00:00:00 2001
From: Cem Aksoylar <caksoylar@users.noreply.github.com>
Date: Tue, 6 Aug 2024 17:46:31 -0700
Subject: [PATCH 2/4] Fix extra dereferencing bug

---
 app/src/keymap.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/app/src/keymap.c b/app/src/keymap.c
index f5a798538a2..32e4abbd69d 100644
--- a/app/src/keymap.c
+++ b/app/src/keymap.c
@@ -219,7 +219,7 @@ int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
         if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
             return invoke_locally(binding, event, pressed);
         } else {
-            return zmk_split_bt_invoke_behavior(source, &binding, event, pressed);
+            return zmk_split_bt_invoke_behavior(source, binding, event, pressed);
         }
 #else
         return invoke_locally(binding, event, pressed);

From 7ac3d964121d6da20ec4496b65aa0e6f0998622c Mon Sep 17 00:00:00 2001
From: Cem Aksoylar <caksoylar@users.noreply.github.com>
Date: Tue, 6 Aug 2024 23:31:01 -0700
Subject: [PATCH 3/4] Attempt to properly pass through sources

---
 app/include/zmk/behavior.h                    |  1 +
 app/include/zmk/behavior_queue.h              |  4 ++--
 app/include/zmk/keymap.h                      |  3 +--
 app/include/zmk/split/bluetooth/service.h     |  1 +
 app/src/behavior_queue.c                      | 16 +++++++------
 app/src/behaviors/behavior_hold_tap.c         | 23 ++++++++++++-------
 app/src/behaviors/behavior_macro.c            | 15 ++++++------
 app/src/behaviors/behavior_mod_morph.c        |  5 ++--
 .../behaviors/behavior_sensor_rotate_common.c |  4 ++--
 app/src/behaviors/behavior_sticky_key.c       | 15 ++++++++----
 app/src/behaviors/behavior_tap_dance.c        | 15 ++++++++----
 app/src/keymap.c                              | 10 ++++----
 app/src/split/bluetooth/central.c             |  1 +
 13 files changed, 68 insertions(+), 45 deletions(-)

diff --git a/app/include/zmk/behavior.h b/app/include/zmk/behavior.h
index d45bbfffe75..ad16af211c5 100644
--- a/app/include/zmk/behavior.h
+++ b/app/include/zmk/behavior.h
@@ -26,6 +26,7 @@ struct zmk_behavior_binding_event {
     int layer;
     uint32_t position;
     int64_t timestamp;
+    uint8_t source;
 };
 
 /**
diff --git a/app/include/zmk/behavior_queue.h b/app/include/zmk/behavior_queue.h
index 307482e7cd4..781f582e095 100644
--- a/app/include/zmk/behavior_queue.h
+++ b/app/include/zmk/behavior_queue.h
@@ -10,5 +10,5 @@
 #include <stdint.h>
 #include <zmk/behavior.h>
 
-int zmk_behavior_queue_add(uint32_t position, const struct zmk_behavior_binding behavior,
-                           bool press, uint32_t wait);
+int zmk_behavior_queue_add(uint32_t position, uint8_t source,
+                           const struct zmk_behavior_binding behavior, bool press, uint32_t wait);
diff --git a/app/include/zmk/keymap.h b/app/include/zmk/keymap.h
index 6d3d91121a1..f713092b3bf 100644
--- a/app/include/zmk/keymap.h
+++ b/app/include/zmk/keymap.h
@@ -29,8 +29,7 @@ int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pr
                                       int64_t timestamp);
 
 int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
-                                   struct zmk_behavior_binding_event event, uint8_t source,
-                                   bool pressed);
+                                   struct zmk_behavior_binding_event event, bool pressed);
 
 #define ZMK_KEYMAP_EXTRACT_BINDING(idx, drv_inst)                                                  \
     {                                                                                              \
diff --git a/app/include/zmk/split/bluetooth/service.h b/app/include/zmk/split/bluetooth/service.h
index 112cd552942..1c9e75226ad 100644
--- a/app/include/zmk/split/bluetooth/service.h
+++ b/app/include/zmk/split/bluetooth/service.h
@@ -20,6 +20,7 @@ struct sensor_event {
 
 struct zmk_split_run_behavior_data {
     uint8_t position;
+    uint8_t source;
     uint8_t state;
     uint32_t param1;
     uint32_t param2;
diff --git a/app/src/behavior_queue.c b/app/src/behavior_queue.c
index 531a92cb56e..eb8f95b7db1 100644
--- a/app/src/behavior_queue.c
+++ b/app/src/behavior_queue.c
@@ -15,6 +15,7 @@ LOG_MODULE_DECLARE(zmk, CONFIG_ZMK_LOG_LEVEL);
 
 struct q_item {
     uint32_t position;
+    uint8_t source;
     struct zmk_behavior_binding binding;
     bool press : 1;
     uint32_t wait : 31;
@@ -32,13 +33,13 @@ static void behavior_queue_process_next(struct k_work *work) {
         LOG_DBG("Invoking %s: 0x%02x 0x%02x", item.binding.behavior_dev, item.binding.param1,
                 item.binding.param2);
 
-        struct zmk_behavior_binding_event event = {.position = item.position,
-                                                   .timestamp = k_uptime_get()};
+        struct zmk_behavior_binding_event event = {
+            .position = item.position, .timestamp = k_uptime_get(), .source = item.source};
 
         if (item.press) {
-            zmk_trigger_behavior_callbacks(&item.binding, event, 0, true);
+            zmk_trigger_behavior_callbacks(&item.binding, event, true);
         } else {
-            zmk_trigger_behavior_callbacks(&item.binding, event, 0, false);
+            zmk_trigger_behavior_callbacks(&item.binding, event, false);
         }
 
         LOG_DBG("Processing next queued behavior in %dms", item.wait);
@@ -50,9 +51,10 @@ static void behavior_queue_process_next(struct k_work *work) {
     }
 }
 
-int zmk_behavior_queue_add(uint32_t position, const struct zmk_behavior_binding binding, bool press,
-                           uint32_t wait) {
-    struct q_item item = {.press = press, .binding = binding, .wait = wait};
+int zmk_behavior_queue_add(uint32_t position, uint8_t source,
+                           const struct zmk_behavior_binding binding, bool press, uint32_t wait) {
+    struct q_item item = {
+        .press = press, .binding = binding, .wait = wait, .position = position, .source = source};
 
     const int ret = k_msgq_put(&zmk_behavior_queue_msgq, &item, K_NO_WAIT);
     if (ret < 0) {
diff --git a/app/src/behaviors/behavior_hold_tap.c b/app/src/behaviors/behavior_hold_tap.c
index 1c050c44fe5..b0717c37167 100644
--- a/app/src/behaviors/behavior_hold_tap.c
+++ b/app/src/behaviors/behavior_hold_tap.c
@@ -77,6 +77,7 @@ struct behavior_hold_tap_data {
 // this data is specific for each hold-tap
 struct active_hold_tap {
     int32_t position;
+    uint8_t source;
     uint32_t param_hold;
     uint32_t param_tap;
     int64_t timestamp;
@@ -250,14 +251,16 @@ static struct active_hold_tap *find_hold_tap(uint32_t position) {
     return NULL;
 }
 
-static struct active_hold_tap *store_hold_tap(uint32_t position, uint32_t param_hold,
-                                              uint32_t param_tap, int64_t timestamp,
+static struct active_hold_tap *store_hold_tap(uint32_t position, uint8_t source,
+                                              uint32_t param_hold, uint32_t param_tap,
+                                              int64_t timestamp,
                                               const struct behavior_hold_tap_config *config) {
     for (int i = 0; i < ZMK_BHV_HOLD_TAP_MAX_HELD; i++) {
         if (active_hold_taps[i].position != ZMK_BHV_HOLD_TAP_POSITION_NOT_USED) {
             continue;
         }
         active_hold_taps[i].position = position;
+        active_hold_taps[i].source = source;
         active_hold_taps[i].status = STATUS_UNDECIDED;
         active_hold_taps[i].config = config;
         active_hold_taps[i].param_hold = param_hold;
@@ -400,45 +403,49 @@ static int press_hold_binding(struct active_hold_tap *hold_tap) {
     struct zmk_behavior_binding_event event = {
         .position = hold_tap->position,
         .timestamp = hold_tap->timestamp,
+        .source = hold_tap->source,
     };
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->hold_behavior_dev,
                                            .param1 = hold_tap->param_hold};
-    return behavior_keymap_binding_pressed(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, true);
 }
 
 static int press_tap_binding(struct active_hold_tap *hold_tap) {
     struct zmk_behavior_binding_event event = {
         .position = hold_tap->position,
         .timestamp = hold_tap->timestamp,
+        .source = hold_tap->source,
     };
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->tap_behavior_dev,
                                            .param1 = hold_tap->param_tap};
     store_last_hold_tapped(hold_tap);
-    return behavior_keymap_binding_pressed(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, true);
 }
 
 static int release_hold_binding(struct active_hold_tap *hold_tap) {
     struct zmk_behavior_binding_event event = {
         .position = hold_tap->position,
         .timestamp = hold_tap->timestamp,
+        .source = hold_tap->source,
     };
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->hold_behavior_dev,
                                            .param1 = hold_tap->param_hold};
-    return behavior_keymap_binding_released(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, false);
 }
 
 static int release_tap_binding(struct active_hold_tap *hold_tap) {
     struct zmk_behavior_binding_event event = {
         .position = hold_tap->position,
         .timestamp = hold_tap->timestamp,
+        .source = hold_tap->source,
     };
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->tap_behavior_dev,
                                            .param1 = hold_tap->param_tap};
-    return behavior_keymap_binding_released(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, false);
 }
 
 static int press_binding(struct active_hold_tap *hold_tap) {
@@ -597,8 +604,8 @@ static int on_hold_tap_binding_pressed(struct zmk_behavior_binding *binding,
         return ZMK_BEHAVIOR_OPAQUE;
     }
 
-    struct active_hold_tap *hold_tap =
-        store_hold_tap(event.position, binding->param1, binding->param2, event.timestamp, cfg);
+    struct active_hold_tap *hold_tap = store_hold_tap(event.position, event.source, binding->param1,
+                                                      binding->param2, event.timestamp, cfg);
     if (hold_tap == NULL) {
         LOG_ERR("unable to store hold-tap info, did you press more than %d hold-taps?",
                 ZMK_BHV_HOLD_TAP_MAX_HELD);
diff --git a/app/src/behaviors/behavior_macro.c b/app/src/behaviors/behavior_macro.c
index b535ed8be07..adf3fa65747 100644
--- a/app/src/behaviors/behavior_macro.c
+++ b/app/src/behaviors/behavior_macro.c
@@ -158,7 +158,8 @@ static void replace_params(struct behavior_macro_trigger_state *state,
     state->param2_source = PARAM_SOURCE_BINDING;
 }
 
-static void queue_macro(uint32_t position, const struct zmk_behavior_binding bindings[],
+static void queue_macro(uint32_t position, uint8_t source,
+                        const struct zmk_behavior_binding bindings[],
                         struct behavior_macro_trigger_state state,
                         const struct zmk_behavior_binding *macro_binding) {
     LOG_DBG("Iterating macro bindings - starting: %d, count: %d", state.start_index, state.count);
@@ -169,14 +170,14 @@ static void queue_macro(uint32_t position, const struct zmk_behavior_binding bin
 
             switch (state.mode) {
             case MACRO_MODE_TAP:
-                zmk_behavior_queue_add(position, binding, true, state.tap_ms);
-                zmk_behavior_queue_add(position, binding, false, state.wait_ms);
+                zmk_behavior_queue_add(position, source, binding, true, state.tap_ms);
+                zmk_behavior_queue_add(position, source, binding, false, state.wait_ms);
                 break;
             case MACRO_MODE_PRESS:
-                zmk_behavior_queue_add(position, binding, true, state.wait_ms);
+                zmk_behavior_queue_add(position, source, binding, true, state.wait_ms);
                 break;
             case MACRO_MODE_RELEASE:
-                zmk_behavior_queue_add(position, binding, false, state.wait_ms);
+                zmk_behavior_queue_add(position, source, binding, false, state.wait_ms);
                 break;
             default:
                 LOG_ERR("Unknown macro mode: %d", state.mode);
@@ -197,7 +198,7 @@ static int on_macro_binding_pressed(struct zmk_behavior_binding *binding,
                                                          .start_index = 0,
                                                          .count = state->press_bindings_count};
 
-    queue_macro(event.position, cfg->bindings, trigger_state, binding);
+    queue_macro(event.position, event.source, cfg->bindings, trigger_state, binding);
 
     return ZMK_BEHAVIOR_OPAQUE;
 }
@@ -208,7 +209,7 @@ static int on_macro_binding_released(struct zmk_behavior_binding *binding,
     const struct behavior_macro_config *cfg = dev->config;
     struct behavior_macro_state *state = dev->data;
 
-    queue_macro(event.position, cfg->bindings, state->release_state, binding);
+    queue_macro(event.position, event.source, cfg->bindings, state->release_state, binding);
 
     return ZMK_BEHAVIOR_OPAQUE;
 }
diff --git a/app/src/behaviors/behavior_mod_morph.c b/app/src/behaviors/behavior_mod_morph.c
index 303f96a7d05..08dc9cbb2f7 100644
--- a/app/src/behaviors/behavior_mod_morph.c
+++ b/app/src/behaviors/behavior_mod_morph.c
@@ -10,6 +10,7 @@
 #include <drivers/behavior.h>
 #include <zephyr/logging/log.h>
 #include <zmk/behavior.h>
+#include <zmk/keymap.h>
 
 #include <zmk/matrix.h>
 #include <zmk/endpoints.h>
@@ -51,7 +52,7 @@ static int on_mod_morph_binding_pressed(struct zmk_behavior_binding *binding,
     } else {
         data->pressed_binding = (struct zmk_behavior_binding *)&cfg->normal_binding;
     }
-    return behavior_keymap_binding_pressed(data->pressed_binding, event);
+    return zmk_trigger_behavior_callbacks(data->pressed_binding, event, true);
 }
 
 static int on_mod_morph_binding_released(struct zmk_behavior_binding *binding,
@@ -67,7 +68,7 @@ static int on_mod_morph_binding_released(struct zmk_behavior_binding *binding,
     struct zmk_behavior_binding *pressed_binding = data->pressed_binding;
     data->pressed_binding = NULL;
     int err;
-    err = behavior_keymap_binding_released(pressed_binding, event);
+    err = zmk_trigger_behavior_callbacks(pressed_binding, event, false);
     zmk_hid_masked_modifiers_clear();
     return err;
 }
diff --git a/app/src/behaviors/behavior_sensor_rotate_common.c b/app/src/behaviors/behavior_sensor_rotate_common.c
index 94bf40c18d4..677443ee290 100644
--- a/app/src/behaviors/behavior_sensor_rotate_common.c
+++ b/app/src/behaviors/behavior_sensor_rotate_common.c
@@ -90,8 +90,8 @@ int zmk_behavior_sensor_rotate_common_process(struct zmk_behavior_binding *bindi
     LOG_DBG("Sensor binding: %s", binding->behavior_dev);
 
     for (int i = 0; i < triggers; i++) {
-        zmk_behavior_queue_add(event.position, triggered_binding, true, cfg->tap_ms);
-        zmk_behavior_queue_add(event.position, triggered_binding, false, 0);
+        zmk_behavior_queue_add(event.position, event.source, triggered_binding, true, cfg->tap_ms);
+        zmk_behavior_queue_add(event.position, event.source, triggered_binding, false, 0);
     }
 
     return ZMK_BEHAVIOR_OPAQUE;
diff --git a/app/src/behaviors/behavior_sticky_key.c b/app/src/behaviors/behavior_sticky_key.c
index d1299c78d7f..b14dc5e353e 100644
--- a/app/src/behaviors/behavior_sticky_key.c
+++ b/app/src/behaviors/behavior_sticky_key.c
@@ -40,6 +40,7 @@ struct behavior_sticky_key_config {
 
 struct active_sticky_key {
     uint32_t position;
+    uint8_t source;
     uint32_t param1;
     uint32_t param2;
     const struct behavior_sticky_key_config *config;
@@ -55,8 +56,8 @@ struct active_sticky_key {
 
 struct active_sticky_key active_sticky_keys[ZMK_BHV_STICKY_KEY_MAX_HELD] = {};
 
-static struct active_sticky_key *store_sticky_key(uint32_t position, uint32_t param1,
-                                                  uint32_t param2,
+static struct active_sticky_key *store_sticky_key(uint32_t position, uint8_t source,
+                                                  uint32_t param1, uint32_t param2,
                                                   const struct behavior_sticky_key_config *config) {
     for (int i = 0; i < ZMK_BHV_STICKY_KEY_MAX_HELD; i++) {
         struct active_sticky_key *const sticky_key = &active_sticky_keys[i];
@@ -65,6 +66,7 @@ static struct active_sticky_key *store_sticky_key(uint32_t position, uint32_t pa
             continue;
         }
         sticky_key->position = position;
+        sticky_key->source = source;
         sticky_key->param1 = param1;
         sticky_key->param2 = param2;
         sticky_key->config = config;
@@ -101,8 +103,9 @@ static inline int press_sticky_key_behavior(struct active_sticky_key *sticky_key
     struct zmk_behavior_binding_event event = {
         .position = sticky_key->position,
         .timestamp = timestamp,
+        .source = sticky_key->source,
     };
-    return behavior_keymap_binding_pressed(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, true);
 }
 
 static inline int release_sticky_key_behavior(struct active_sticky_key *sticky_key,
@@ -115,10 +118,11 @@ static inline int release_sticky_key_behavior(struct active_sticky_key *sticky_k
     struct zmk_behavior_binding_event event = {
         .position = sticky_key->position,
         .timestamp = timestamp,
+        .source = sticky_key->source,
     };
 
     clear_sticky_key(sticky_key);
-    return behavior_keymap_binding_released(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, false);
 }
 
 static inline void on_sticky_key_timeout(struct active_sticky_key *sticky_key) {
@@ -149,7 +153,8 @@ static int on_sticky_key_binding_pressed(struct zmk_behavior_binding *binding,
         stop_timer(sticky_key);
         release_sticky_key_behavior(sticky_key, event.timestamp);
     }
-    sticky_key = store_sticky_key(event.position, binding->param1, binding->param2, cfg);
+    sticky_key =
+        store_sticky_key(event.position, event.source, binding->param1, binding->param2, cfg);
     if (sticky_key == NULL) {
         LOG_ERR("unable to store sticky key, did you press more than %d sticky_key?",
                 ZMK_BHV_STICKY_KEY_MAX_HELD);
diff --git a/app/src/behaviors/behavior_tap_dance.c b/app/src/behaviors/behavior_tap_dance.c
index ce57b70fc4b..51eb4a62b70 100644
--- a/app/src/behaviors/behavior_tap_dance.c
+++ b/app/src/behaviors/behavior_tap_dance.c
@@ -35,6 +35,7 @@ struct active_tap_dance {
     // Tap Dance Data
     int counter;
     uint32_t position;
+    uint8_t source;
     uint32_t param1;
     uint32_t param2;
     bool is_pressed;
@@ -59,13 +60,15 @@ static struct active_tap_dance *find_tap_dance(uint32_t position) {
     return NULL;
 }
 
-static int new_tap_dance(uint32_t position, const struct behavior_tap_dance_config *config,
+static int new_tap_dance(uint32_t position, uint8_t source,
+                         const struct behavior_tap_dance_config *config,
                          struct active_tap_dance **tap_dance) {
     for (int i = 0; i < ZMK_BHV_TAP_DANCE_MAX_HELD; i++) {
         struct active_tap_dance *const ref_dance = &active_tap_dances[i];
         if (ref_dance->position == ZMK_BHV_TAP_DANCE_POSITION_FREE) {
             ref_dance->counter = 0;
             ref_dance->position = position;
+            ref_dance->source = source;
             ref_dance->config = config;
             ref_dance->release_at = 0;
             ref_dance->is_pressed = true;
@@ -108,8 +111,9 @@ static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, i
     struct zmk_behavior_binding_event event = {
         .position = tap_dance->position,
         .timestamp = timestamp,
+        .source = tap_dance->source,
     };
-    return behavior_keymap_binding_pressed(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, true);
 }
 
 static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
@@ -118,9 +122,10 @@ static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
     struct zmk_behavior_binding_event event = {
         .position = tap_dance->position,
         .timestamp = timestamp,
+        .source = tap_dance->source,
     };
     clear_tap_dance(tap_dance);
-    return behavior_keymap_binding_released(&binding, event);
+    return zmk_trigger_behavior_callbacks(&binding, event, false);
 }
 
 static int on_tap_dance_binding_pressed(struct zmk_behavior_binding *binding,
@@ -130,7 +135,7 @@ static int on_tap_dance_binding_pressed(struct zmk_behavior_binding *binding,
     struct active_tap_dance *tap_dance;
     tap_dance = find_tap_dance(event.position);
     if (tap_dance == NULL) {
-        if (new_tap_dance(event.position, cfg, &tap_dance) == -ENOMEM) {
+        if (new_tap_dance(event.position, event.source, cfg, &tap_dance) == -ENOMEM) {
             LOG_ERR("Unable to create new tap dance. Insufficient space in active_tap_dances[].");
             return ZMK_BEHAVIOR_OPAQUE;
         }
@@ -261,4 +266,4 @@ static int behavior_tap_dance_init(const struct device *dev) {
 
 DT_INST_FOREACH_STATUS_OKAY(KP_INST)
 
-#endif
\ No newline at end of file
+#endif
diff --git a/app/src/keymap.c b/app/src/keymap.c
index 32e4abbd69d..897472e2282 100644
--- a/app/src/keymap.c
+++ b/app/src/keymap.c
@@ -181,16 +181,16 @@ int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position
         .layer = layer,
         .position = position,
         .timestamp = timestamp,
+        .source = source,
     };
 
     LOG_DBG("layer: %d position: %d, binding name: %s", layer, position, binding.behavior_dev);
 
-    return zmk_trigger_behavior_callbacks(&binding, event, source, pressed);
+    return zmk_trigger_behavior_callbacks(&binding, event, pressed);
 }
 
 int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
-                                   struct zmk_behavior_binding_event event, uint8_t source,
-                                   bool pressed) {
+                                   struct zmk_behavior_binding_event event, bool pressed) {
     const struct device *behavior = zmk_behavior_get_binding(binding->behavior_dev);
 
     if (!behavior) {
@@ -216,10 +216,10 @@ int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
         return invoke_locally(binding, event, pressed);
     case BEHAVIOR_LOCALITY_EVENT_SOURCE:
 #if ZMK_BLE_IS_CENTRAL
-        if (source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
+        if (event.source == ZMK_POSITION_STATE_CHANGE_SOURCE_LOCAL) {
             return invoke_locally(binding, event, pressed);
         } else {
-            return zmk_split_bt_invoke_behavior(source, binding, event, pressed);
+            return zmk_split_bt_invoke_behavior(event.source, binding, event, pressed);
         }
 #else
         return invoke_locally(binding, event, pressed);
diff --git a/app/src/split/bluetooth/central.c b/app/src/split/bluetooth/central.c
index 0f4cd78b531..9c459bf1b1d 100644
--- a/app/src/split/bluetooth/central.c
+++ b/app/src/split/bluetooth/central.c
@@ -816,6 +816,7 @@ int zmk_split_bt_invoke_behavior(uint8_t source, struct zmk_behavior_binding *bi
                                                          .param1 = binding->param1,
                                                          .param2 = binding->param2,
                                                          .position = event.position,
+                                                         .source = event.source,
                                                          .state = state ? 1 : 0,
                                                      }};
     const size_t payload_dev_size = sizeof(payload.behavior_dev);

From ff0f77af89f9709571567e39c4c2dba8a2e1d8e5 Mon Sep 17 00:00:00 2001
From: Cem Aksoylar <caksoylar@users.noreply.github.com>
Date: Tue, 6 Aug 2024 23:50:19 -0700
Subject: [PATCH 4/4] Rename function again

---
 app/include/zmk/keymap.h                | 4 ++--
 app/src/behavior_queue.c                | 4 ++--
 app/src/behaviors/behavior_hold_tap.c   | 8 ++++----
 app/src/behaviors/behavior_mod_morph.c  | 4 ++--
 app/src/behaviors/behavior_sticky_key.c | 4 ++--
 app/src/behaviors/behavior_tap_dance.c  | 4 ++--
 app/src/keymap.c                        | 6 +++---
 7 files changed, 17 insertions(+), 17 deletions(-)

diff --git a/app/include/zmk/keymap.h b/app/include/zmk/keymap.h
index f713092b3bf..6945c080a74 100644
--- a/app/include/zmk/keymap.h
+++ b/app/include/zmk/keymap.h
@@ -28,8 +28,8 @@ const char *zmk_keymap_layer_name(uint8_t layer);
 int zmk_keymap_position_state_changed(uint8_t source, uint32_t position, bool pressed,
                                       int64_t timestamp);
 
-int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
-                                   struct zmk_behavior_binding_event event, bool pressed);
+int zmk_invoke_behavior_binding(struct zmk_behavior_binding *binding,
+                                struct zmk_behavior_binding_event event, bool pressed);
 
 #define ZMK_KEYMAP_EXTRACT_BINDING(idx, drv_inst)                                                  \
     {                                                                                              \
diff --git a/app/src/behavior_queue.c b/app/src/behavior_queue.c
index eb8f95b7db1..f04982019a3 100644
--- a/app/src/behavior_queue.c
+++ b/app/src/behavior_queue.c
@@ -37,9 +37,9 @@ static void behavior_queue_process_next(struct k_work *work) {
             .position = item.position, .timestamp = k_uptime_get(), .source = item.source};
 
         if (item.press) {
-            zmk_trigger_behavior_callbacks(&item.binding, event, true);
+            zmk_invoke_behavior_binding(&item.binding, event, true);
         } else {
-            zmk_trigger_behavior_callbacks(&item.binding, event, false);
+            zmk_invoke_behavior_binding(&item.binding, event, false);
         }
 
         LOG_DBG("Processing next queued behavior in %dms", item.wait);
diff --git a/app/src/behaviors/behavior_hold_tap.c b/app/src/behaviors/behavior_hold_tap.c
index b0717c37167..a94960c8a92 100644
--- a/app/src/behaviors/behavior_hold_tap.c
+++ b/app/src/behaviors/behavior_hold_tap.c
@@ -408,7 +408,7 @@ static int press_hold_binding(struct active_hold_tap *hold_tap) {
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->hold_behavior_dev,
                                            .param1 = hold_tap->param_hold};
-    return zmk_trigger_behavior_callbacks(&binding, event, true);
+    return zmk_invoke_behavior_binding(&binding, event, true);
 }
 
 static int press_tap_binding(struct active_hold_tap *hold_tap) {
@@ -421,7 +421,7 @@ static int press_tap_binding(struct active_hold_tap *hold_tap) {
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->tap_behavior_dev,
                                            .param1 = hold_tap->param_tap};
     store_last_hold_tapped(hold_tap);
-    return zmk_trigger_behavior_callbacks(&binding, event, true);
+    return zmk_invoke_behavior_binding(&binding, event, true);
 }
 
 static int release_hold_binding(struct active_hold_tap *hold_tap) {
@@ -433,7 +433,7 @@ static int release_hold_binding(struct active_hold_tap *hold_tap) {
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->hold_behavior_dev,
                                            .param1 = hold_tap->param_hold};
-    return zmk_trigger_behavior_callbacks(&binding, event, false);
+    return zmk_invoke_behavior_binding(&binding, event, false);
 }
 
 static int release_tap_binding(struct active_hold_tap *hold_tap) {
@@ -445,7 +445,7 @@ static int release_tap_binding(struct active_hold_tap *hold_tap) {
 
     struct zmk_behavior_binding binding = {.behavior_dev = hold_tap->config->tap_behavior_dev,
                                            .param1 = hold_tap->param_tap};
-    return zmk_trigger_behavior_callbacks(&binding, event, false);
+    return zmk_invoke_behavior_binding(&binding, event, false);
 }
 
 static int press_binding(struct active_hold_tap *hold_tap) {
diff --git a/app/src/behaviors/behavior_mod_morph.c b/app/src/behaviors/behavior_mod_morph.c
index 08dc9cbb2f7..37ff67feaba 100644
--- a/app/src/behaviors/behavior_mod_morph.c
+++ b/app/src/behaviors/behavior_mod_morph.c
@@ -52,7 +52,7 @@ static int on_mod_morph_binding_pressed(struct zmk_behavior_binding *binding,
     } else {
         data->pressed_binding = (struct zmk_behavior_binding *)&cfg->normal_binding;
     }
-    return zmk_trigger_behavior_callbacks(data->pressed_binding, event, true);
+    return zmk_invoke_behavior_binding(data->pressed_binding, event, true);
 }
 
 static int on_mod_morph_binding_released(struct zmk_behavior_binding *binding,
@@ -68,7 +68,7 @@ static int on_mod_morph_binding_released(struct zmk_behavior_binding *binding,
     struct zmk_behavior_binding *pressed_binding = data->pressed_binding;
     data->pressed_binding = NULL;
     int err;
-    err = zmk_trigger_behavior_callbacks(pressed_binding, event, false);
+    err = zmk_invoke_behavior_binding(pressed_binding, event, false);
     zmk_hid_masked_modifiers_clear();
     return err;
 }
diff --git a/app/src/behaviors/behavior_sticky_key.c b/app/src/behaviors/behavior_sticky_key.c
index b14dc5e353e..a3ccc37bbc4 100644
--- a/app/src/behaviors/behavior_sticky_key.c
+++ b/app/src/behaviors/behavior_sticky_key.c
@@ -105,7 +105,7 @@ static inline int press_sticky_key_behavior(struct active_sticky_key *sticky_key
         .timestamp = timestamp,
         .source = sticky_key->source,
     };
-    return zmk_trigger_behavior_callbacks(&binding, event, true);
+    return zmk_invoke_behavior_binding(&binding, event, true);
 }
 
 static inline int release_sticky_key_behavior(struct active_sticky_key *sticky_key,
@@ -122,7 +122,7 @@ static inline int release_sticky_key_behavior(struct active_sticky_key *sticky_k
     };
 
     clear_sticky_key(sticky_key);
-    return zmk_trigger_behavior_callbacks(&binding, event, false);
+    return zmk_invoke_behavior_binding(&binding, event, false);
 }
 
 static inline void on_sticky_key_timeout(struct active_sticky_key *sticky_key) {
diff --git a/app/src/behaviors/behavior_tap_dance.c b/app/src/behaviors/behavior_tap_dance.c
index 51eb4a62b70..bcb5d243b59 100644
--- a/app/src/behaviors/behavior_tap_dance.c
+++ b/app/src/behaviors/behavior_tap_dance.c
@@ -113,7 +113,7 @@ static inline int press_tap_dance_behavior(struct active_tap_dance *tap_dance, i
         .timestamp = timestamp,
         .source = tap_dance->source,
     };
-    return zmk_trigger_behavior_callbacks(&binding, event, true);
+    return zmk_invoke_behavior_binding(&binding, event, true);
 }
 
 static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
@@ -125,7 +125,7 @@ static inline int release_tap_dance_behavior(struct active_tap_dance *tap_dance,
         .source = tap_dance->source,
     };
     clear_tap_dance(tap_dance);
-    return zmk_trigger_behavior_callbacks(&binding, event, false);
+    return zmk_invoke_behavior_binding(&binding, event, false);
 }
 
 static int on_tap_dance_binding_pressed(struct zmk_behavior_binding *binding,
diff --git a/app/src/keymap.c b/app/src/keymap.c
index 897472e2282..1efe0855e57 100644
--- a/app/src/keymap.c
+++ b/app/src/keymap.c
@@ -186,11 +186,11 @@ int zmk_keymap_apply_position_state(uint8_t source, int layer, uint32_t position
 
     LOG_DBG("layer: %d position: %d, binding name: %s", layer, position, binding.behavior_dev);
 
-    return zmk_trigger_behavior_callbacks(&binding, event, pressed);
+    return zmk_invoke_behavior_binding(&binding, event, pressed);
 }
 
-int zmk_trigger_behavior_callbacks(struct zmk_behavior_binding *binding,
-                                   struct zmk_behavior_binding_event event, bool pressed) {
+int zmk_invoke_behavior_binding(struct zmk_behavior_binding *binding,
+                                struct zmk_behavior_binding_event event, bool pressed) {
     const struct device *behavior = zmk_behavior_get_binding(binding->behavior_dev);
 
     if (!behavior) {
