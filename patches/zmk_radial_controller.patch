diff --git a/app/Kconfig b/app/Kconfig
index 0e7bdfa..856f8c9 100644
--- a/app/Kconfig
+++ b/app/Kconfig
@@ -144,6 +144,10 @@ config ZMK_BLE_CONSUMER_REPORT_QUEUE_SIZE
     int "Max number of consumer HID reports to queue for sending over BLE"
     default 5
 
+config ZMK_BLE_RADIAL_CONTROLLER_REPORT_QUEUE_SIZE
+    int "Max number of radial controller HID reports to queue for sending over BLE"
+    default 5
+
 config ZMK_BLE_CLEAR_BONDS_ON_START
     bool "Configuration that clears all bond information from the keyboard on startup."
     default n
@@ -570,4 +574,3 @@ osource "$(ZMK_CONFIG)/boards/shields/*/Kconfig.shield"
 
 
 source "Kconfig.zephyr"
-
diff --git a/app/include/zmk/endpoints.h b/app/include/zmk/endpoints.h
index c5964ff..e2e70cf 100644
--- a/app/include/zmk/endpoints.h
+++ b/app/include/zmk/endpoints.h
@@ -69,3 +69,5 @@ int zmk_endpoints_toggle_transport(void);
 struct zmk_endpoint_instance zmk_endpoints_selected(void);
 
 int zmk_endpoints_send_report(uint16_t usage_page);
+
+int zmk_endpoints_send_radial_controller_report(void);
diff --git a/app/include/zmk/hid.h b/app/include/zmk/hid.h
index ab42ada..a3d60b0 100644
--- a/app/include/zmk/hid.h
+++ b/app/include/zmk/hid.h
@@ -89,6 +89,42 @@ static const uint8_t zmk_hid_report_desc[] = {
     /* INPUT (Data,Ary,Abs) */
     HID_INPUT(0x00),
     HID_END_COLLECTION,
+
+    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),
+    HID_USAGE(HID_USAGE_GD_SYSTEM_MULTI_AXIS_CONTROLLER),
+    HID_COLLECTION(HID_COLLECTION_APPLICATION),
+    HID_REPORT_ID(0x03),
+    HID_USAGE_PAGE(HID_USAGE_DIGITIZERS),
+    HID_USAGE(HID_USAGE_DIGITIZERS_PUCK),
+    HID_COLLECTION(HID_COLLECTION_PHYSICAL), // Physical
+    HID_USAGE_PAGE(0x09),                    // Buttons
+    HID_USAGE(0x01),                         // Button 1
+    HID_LOGICAL_MIN8(0x00),
+    HID_LOGICAL_MAX8(0x01),
+    HID_REPORT_COUNT(1),
+    HID_REPORT_SIZE(1),
+    /* INPUT (Data,Var,Abs) */
+    HID_INPUT(2),
+    HID_USAGE_PAGE(HID_USAGE_GEN_DESKTOP),
+    HID_USAGE(HID_USAGE_GD_DIAL),
+    0x55,
+    0x0F, // Unit Exponent (-1)
+    0x65,
+    0x14, // Unit (System: English Rotation, Length: Centimeter)
+    0x36,
+    0xF0,
+    0xF1, // Physical Minimum (-3600)
+    0x46,
+    0x10,
+    0x0E,                          // Physical Maximum (3600)
+    HID_LOGICAL_MIN16(0xF0, 0xF1), // -3600
+    HID_LOGICAL_MAX16(0x10, 0x0E), // 3600
+    HID_REPORT_COUNT(1),
+    HID_REPORT_SIZE(15),
+    /* INPUT (Data,Var,Rel) */
+    HID_INPUT(6),
+    HID_END_COLLECTION,
+    HID_END_COLLECTION,
 };
 
 // struct zmk_hid_boot_report
@@ -126,6 +162,16 @@ struct zmk_hid_consumer_report {
     struct zmk_hid_consumer_report_body body;
 } __packed;
 
+struct zmk_hid_radial_controller_report_body {
+    bool button : 1;
+    int16_t dial : 15;
+} __packed;
+
+struct zmk_hid_radial_controller_report {
+    uint8_t report_id;
+    struct zmk_hid_radial_controller_report_body body;
+} __packed;
+
 zmk_mod_flags_t zmk_hid_get_explicit_mods();
 int zmk_hid_register_mod(zmk_mod_t modifier);
 int zmk_hid_unregister_mod(zmk_mod_t modifier);
@@ -148,9 +194,16 @@ int zmk_hid_consumer_release(zmk_key_t key);
 void zmk_hid_consumer_clear();
 bool zmk_hid_consumer_is_pressed(zmk_key_t key);
 
+int zmk_hid_radial_controller_button_press();
+int zmk_hid_radial_controller_button_release();
+int zmk_hid_radial_controller_dial_rotate(int16_t x10degree);
+void zmk_hid_radial_controller_clear();
+bool zmk_hid_radial_controller_button_is_pressed();
+
 int zmk_hid_press(uint32_t usage);
 int zmk_hid_release(uint32_t usage);
 bool zmk_hid_is_pressed(uint32_t usage);
 
 struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report();
 struct zmk_hid_consumer_report *zmk_hid_get_consumer_report();
+struct zmk_hid_radial_controller_report *zmk_hid_get_radial_controller_report();
diff --git a/app/include/zmk/hog.h b/app/include/zmk/hog.h
index 7523fb6..85d1777 100644
--- a/app/include/zmk/hog.h
+++ b/app/include/zmk/hog.h
@@ -13,3 +13,4 @@ int zmk_hog_init();
 
 int zmk_hog_send_keyboard_report(struct zmk_hid_keyboard_report_body *body);
 int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *body);
+int zmk_hog_send_radial_controller_report(struct zmk_hid_radial_controller_report_body *body);
diff --git a/app/src/endpoints.c b/app/src/endpoints.c
index 378a4b7..cdc6163 100644
--- a/app/src/endpoints.c
+++ b/app/src/endpoints.c
@@ -193,6 +193,37 @@ int zmk_endpoints_send_report(uint16_t usage_page) {
     return -ENOTSUP;
 }
 
+int zmk_endpoints_send_radial_controller_report() {
+    struct zmk_hid_radial_controller_report *radial_controller_report =
+        zmk_hid_get_radial_controller_report();
+
+    switch (current_instance.transport) {
+#if IS_ENABLED(CONFIG_ZMK_USB)
+    case ZMK_TRANSPORT_USB: {
+        int err = zmk_usb_hid_send_report((uint8_t *)radial_controller_report,
+                                          sizeof(*radial_controller_report));
+        if (err) {
+            LOG_ERR("FAILED TO SEND OVER USB: %d", err);
+        }
+        return err;
+    }
+#endif /* IS_ENABLED(CONFIG_ZMK_USB) */
+
+#if IS_ENABLED(CONFIG_ZMK_BLE)
+    case ZMK_TRANSPORT_BLE: {
+        int err = zmk_hog_send_radial_controller_report(&radial_controller_report->body);
+        if (err) {
+            LOG_ERR("FAILED TO SEND OVER HOG: %d", err);
+        }
+        return err;
+    }
+#endif /* IS_ENABLED(CONFIG_ZMK_BLE) */
+    }
+
+    LOG_ERR("Unsupported endpoint transport %d", current_instance.transport);
+    return -ENOTSUP;
+}
+
 #if IS_ENABLED(CONFIG_SETTINGS)
 
 static int endpoints_handle_set(const char *name, size_t len, settings_read_cb read_cb,
@@ -297,9 +328,11 @@ static int zmk_endpoints_init(void) {
 static void disconnect_current_endpoint() {
     zmk_hid_keyboard_clear();
     zmk_hid_consumer_clear();
+    zmk_hid_radial_controller_clear();
 
     zmk_endpoints_send_report(HID_USAGE_KEY);
     zmk_endpoints_send_report(HID_USAGE_CONSUMER);
+    zmk_endpoints_send_radial_controller_report();
 }
 
 static void update_current_endpoint(void) {
diff --git a/app/src/hid.c b/app/src/hid.c
index 2a6b5d3..6118bb7 100644
--- a/app/src/hid.c
+++ b/app/src/hid.c
@@ -16,6 +16,9 @@ static struct zmk_hid_keyboard_report keyboard_report = {
 
 static struct zmk_hid_consumer_report consumer_report = {.report_id = 2, .body = {.keys = {0}}};
 
+static struct zmk_hid_radial_controller_report radial_controller_report = {
+    .report_id = 3, .body = {.button = false, .dial = 0}};
+
 // Keep track of how often a modifier was pressed.
 // Only release the modifier if the count is 0.
 static int explicit_modifier_counts[8] = {0, 0, 0, 0, 0, 0, 0, 0};
@@ -234,6 +237,35 @@ bool zmk_hid_consumer_is_pressed(zmk_key_t key) {
     return false;
 }
 
+int zmk_hid_radial_controller_button_press() {
+    radial_controller_report.body.button = true;
+    radial_controller_report.body.dial = 0;
+    return 0;
+}
+
+int zmk_hid_radial_controller_button_release() {
+    radial_controller_report.body.button = false;
+    radial_controller_report.body.dial = 0;
+    return 0;
+}
+
+int zmk_hid_radial_controller_dial_rotate(int16_t x10degree) {
+    int16_t value = x10degree;
+    if (x10degree > 3600)
+        value = 3600;
+    if (x10degree < -3600)
+        value = -3600;
+    radial_controller_report.body.dial = value;
+    return 0;
+}
+
+void zmk_hid_radial_controller_clear() {
+    radial_controller_report.body.button = false;
+    radial_controller_report.body.dial = 0;
+}
+
+bool zmk_hid_radial_controller_button_is_pressed() { return radial_controller_report.body.button; }
+
 int zmk_hid_press(uint32_t usage) {
     switch (ZMK_HID_USAGE_PAGE(usage)) {
     case HID_USAGE_KEY:
@@ -271,3 +303,7 @@ struct zmk_hid_keyboard_report *zmk_hid_get_keyboard_report() {
 struct zmk_hid_consumer_report *zmk_hid_get_consumer_report() {
     return &consumer_report;
 }
+
+struct zmk_hid_radial_controller_report *zmk_hid_get_radial_controller_report() {
+    return &radial_controller_report;
+}
diff --git a/app/src/hog.c b/app/src/hog.c
index 46599ae..4b9c8ea 100644
--- a/app/src/hog.c
+++ b/app/src/hog.c
@@ -56,6 +56,11 @@ static struct hids_report consumer_input = {
     .type = HIDS_INPUT,
 };
 
+static struct hids_report radial_controller_input = {
+    .id = 0x03,
+    .type = HIDS_INPUT,
+};
+
 static bool host_requests_notification = false;
 static uint8_t ctrl_point;
 // static uint8_t proto_mode;
@@ -93,6 +98,15 @@ static ssize_t read_hids_consumer_input_report(struct bt_conn *conn,
                              sizeof(struct zmk_hid_consumer_report_body));
 }
 
+static ssize_t read_hids_radial_controller_input_report(struct bt_conn *conn,
+                                                        const struct bt_gatt_attr *attr, void *buf,
+                                                        uint16_t len, uint16_t offset) {
+    struct zmk_hid_radial_controller_report_body *report_body =
+        &zmk_hid_get_radial_controller_report()->body;
+    return bt_gatt_attr_read(conn, attr, buf, len, offset, report_body,
+                             sizeof(struct zmk_hid_radial_controller_report_body));
+}
+
 // static ssize_t write_proto_mode(struct bt_conn *conn,
 //                                 const struct bt_gatt_attr *attr,
 //                                 const void *buf, uint16_t len, uint16_t offset,
@@ -139,6 +153,12 @@ BT_GATT_SERVICE_DEFINE(
     BT_GATT_CCC(input_ccc_changed, BT_GATT_PERM_READ_ENCRYPT | BT_GATT_PERM_WRITE_ENCRYPT),
     BT_GATT_DESCRIPTOR(BT_UUID_HIDS_REPORT_REF, BT_GATT_PERM_READ_ENCRYPT, read_hids_report_ref,
                        NULL, &consumer_input),
+    BT_GATT_CHARACTERISTIC(BT_UUID_HIDS_REPORT, BT_GATT_CHRC_READ | BT_GATT_CHRC_NOTIFY,
+                           BT_GATT_PERM_READ_ENCRYPT, read_hids_radial_controller_input_report,
+                           NULL, NULL),
+    BT_GATT_CCC(input_ccc_changed, BT_GATT_PERM_READ_ENCRYPT | BT_GATT_PERM_WRITE_ENCRYPT),
+    BT_GATT_DESCRIPTOR(BT_UUID_HIDS_REPORT_REF, BT_GATT_PERM_READ_ENCRYPT, read_hids_report_ref,
+                       NULL, &radial_controller_input),
     BT_GATT_CHARACTERISTIC(BT_UUID_HIDS_CTRL_POINT, BT_GATT_CHRC_WRITE_WITHOUT_RESP,
                            BT_GATT_PERM_WRITE, NULL, write_ctrl_point, &ctrl_point));
 
@@ -261,6 +281,57 @@ int zmk_hog_send_consumer_report(struct zmk_hid_consumer_report_body *report) {
     return 0;
 };
 
+K_MSGQ_DEFINE(zmk_hog_radial_controller_msgq, sizeof(struct zmk_hid_radial_controller_report_body),
+              CONFIG_ZMK_BLE_RADIAL_CONTROLLER_REPORT_QUEUE_SIZE, 2);
+
+void send_radial_controller_report_callback(struct k_work *work) {
+    struct zmk_hid_radial_controller_report_body report;
+
+    while (k_msgq_get(&zmk_hog_radial_controller_msgq, &report, K_NO_WAIT) == 0) {
+        struct bt_conn *conn = destination_connection();
+        if (conn == NULL) {
+            return;
+        }
+
+        struct bt_gatt_notify_params notify_params = {
+            .attr = &hog_svc.attrs[14],
+            .data = &report,
+            .len = sizeof(report),
+        };
+
+        int err = bt_gatt_notify_cb(conn, &notify_params);
+        if (err) {
+            LOG_DBG("Error notifying %d", err);
+        }
+
+        bt_conn_unref(conn);
+    }
+};
+
+K_WORK_DEFINE(hog_radial_controller_work, send_radial_controller_report_callback);
+
+int zmk_hog_send_radial_controller_report(struct zmk_hid_radial_controller_report_body *report) {
+    int err = k_msgq_put(&zmk_hog_radial_controller_msgq, report, K_MSEC(100));
+    if (err) {
+        switch (err) {
+        case -EAGAIN: {
+            LOG_WRN(
+                "Radial controller message queue full, popping first message and queueing again");
+            struct zmk_hid_radial_controller_report_body discarded_report;
+            k_msgq_get(&zmk_hog_radial_controller_msgq, &discarded_report, K_NO_WAIT);
+            return zmk_hog_send_radial_controller_report(report);
+        }
+        default:
+            LOG_WRN("Failed to queue radial controller report to send (%d)", err);
+            return err;
+        }
+    }
+
+    k_work_submit_to_queue(&hog_work_q, &hog_radial_controller_work);
+
+    return 0;
+};
+
 int zmk_hog_init(void) {
     static const struct k_work_queue_config queue_config = {.name = "HID Over GATT Send Work"};
     k_work_queue_start(&hog_work_q, hog_q_stack, K_THREAD_STACK_SIZEOF(hog_q_stack),
