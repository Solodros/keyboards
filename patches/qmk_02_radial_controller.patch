diff --git a/tmk_core/protocol.mk b/tmk_core/protocol.mk
index fd5342d637..ae0e0b1e3c 100644
--- a/tmk_core/protocol.mk
+++ b/tmk_core/protocol.mk
@@ -92,6 +92,10 @@ ifeq ($(strip $(DIGITIZER_ENABLE)), yes)
     endif
 endif
 
+ifeq ($(strip $(RADIAL_CONTROLLER_ENABLE)), yes)
+    OPT_DEFS += -DRADIAL_CONTROLLER_ENABLE
+endif
+
 ifeq ($(strip $(SHARED_EP_ENABLE)), yes)
     OPT_DEFS += -DSHARED_EP_ENABLE
 endif
diff --git a/tmk_core/protocol/chibios/usb_main.c b/tmk_core/protocol/chibios/usb_main.c
index 7b1e641213..bcb5923964 100644
--- a/tmk_core/protocol/chibios/usb_main.c
+++ b/tmk_core/protocol/chibios/usb_main.c
@@ -240,6 +240,24 @@ static const USBEndpointConfig console_ep_config = {
 };
 #endif
 
+#ifdef RADIAL_CONTROLLER_ENABLE
+/* digitizer endpoint state structure */
+static USBInEndpointState radial_controller_ep_state;
+
+/* digitizer endpoint initialization structure (IN) - see USBEndpointConfig comment at top of file */
+static const USBEndpointConfig radial_controller_ep_config = {
+    USB_EP_MODE_TYPE_INTR,       /* Interrupt EP */
+    NULL,                        /* SETUP packet notification callback */
+    dummy_usb_cb,                /* IN notification callback */
+    NULL,                        /* OUT notification callback */
+    RADIAL_CONTROLLER_EPSIZE,    /* IN maximum packet size */
+    0,                           /* OUT maximum packet size */
+    &radial_controller_ep_state, /* IN Endpoint state */
+    NULL,                        /* OUT endpoint state */
+    usb_lld_endpoint_fields      /* USB driver specific endpoint fields */
+};
+#endif
+
 #ifdef USB_ENDPOINTS_ARE_REORDERABLE
 typedef struct {
     size_t              queue_capacity_in;
@@ -523,6 +541,9 @@ static void usb_event_cb(USBDriver *usbp, usbevent_t event) {
 #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
             usbInitEndpointI(usbp, DIGITIZER_IN_EPNUM, &digitizer_ep_config);
 #endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+            usbInitEndpointI(usbp, RADIAL_CONTROLLER_IN_EPNUM, &radial_controller_ep_config);
+#endif
 #ifdef CONSOLE_ENABLE
             usbInitEndpointI(usbp, CONSOLE_IN_EPNUM, &console_ep_config);
 #endif
@@ -923,6 +944,30 @@ void send_digitizer(report_digitizer_t *report) {
 #endif
 }
 
+void send_radial_controller(report_radial_controller_t *report) {
+#ifdef RADIAL_CONTROLLER_ENABLE
+    osalSysLock();
+    if (usbGetDriverStateI(&USB_DRIVER) != USB_ACTIVE) {
+        osalSysUnlock();
+        return;
+    }
+
+    if (usbGetTransmitStatusI(&USB_DRIVER, RADIAL_CONTROLLER_IN_EPNUM)) {
+        /* Need to either suspend, or loop and call unlock/lock during
+         * every iteration - otherwise the system will remain locked,
+         * no interrupts served, so USB not going through as well.
+         * Note: for suspend, need USB_USE_WAIT == TRUE in halconf.h */
+        if (osalThreadSuspendTimeoutS(&(&USB_DRIVER)->epc[RADIAL_CONTROLLER_IN_EPNUM]->in_state->thread, TIME_MS2I(10)) == MSG_TIMEOUT) {
+            osalSysUnlock();
+            return;
+        }
+    }
+
+    usbStartTransmitI(&USB_DRIVER, RADIAL_CONTROLLER_IN_EPNUM, (uint8_t *)report, sizeof(report_radial_controller_t));
+    osalSysUnlock();
+#endif
+}
+
 /* ---------------------------------------------------------
  *                   Console functions
  * ---------------------------------------------------------
diff --git a/tmk_core/protocol/host.c b/tmk_core/protocol/host.c
index 732fbdc37d..b66f49dab2 100644
--- a/tmk_core/protocol/host.c
+++ b/tmk_core/protocol/host.c
@@ -249,6 +249,13 @@ void host_programmable_button_send(uint32_t data) {
 
 __attribute__((weak)) void send_programmable_button(report_programmable_button_t *report) {}
 
+void host_radial_controller_send(report_radial_controller_t *report) {
+    if (!driver) return;
+    send_radial_controller(report);
+}
+
+__attribute__((weak)) void send_radial_controller(report_radial_controller_t *report) {}
+
 uint16_t host_last_system_usage(void) {
     return last_system_usage;
 }
diff --git a/tmk_core/protocol/host.h b/tmk_core/protocol/host.h
index 959753ae02..09e5669ebb 100644
--- a/tmk_core/protocol/host.h
+++ b/tmk_core/protocol/host.h
@@ -43,6 +43,7 @@ void    host_mouse_send(report_mouse_t *report);
 void    host_system_send(uint16_t usage);
 void    host_consumer_send(uint16_t usage);
 void    host_programmable_button_send(uint32_t data);
+void    host_radial_controller_send(report_radial_controller_t *report);
 
 uint16_t host_last_system_usage(void);
 uint16_t host_last_consumer_usage(void);
diff --git a/tmk_core/protocol/host_driver.h b/tmk_core/protocol/host_driver.h
index 8aa38b6dee..3b4d2e6193 100644
--- a/tmk_core/protocol/host_driver.h
+++ b/tmk_core/protocol/host_driver.h
@@ -34,3 +34,4 @@ typedef struct {
 void send_joystick(report_joystick_t *report);
 void send_digitizer(report_digitizer_t *report);
 void send_programmable_button(report_programmable_button_t *report);
+void send_radial_controller(report_radial_controller_t *report);
diff --git a/tmk_core/protocol/lufa/lufa.c b/tmk_core/protocol/lufa/lufa.c
index 22cc0db8ce..e1b789658f 100644
--- a/tmk_core/protocol/lufa/lufa.c
+++ b/tmk_core/protocol/lufa/lufa.c
@@ -385,6 +385,11 @@ void EVENT_USB_Device_ConfigurationChanged(void) {
     ConfigSuccess &= Endpoint_ConfigureEndpoint((DIGITIZER_IN_EPNUM | ENDPOINT_DIR_IN), EP_TYPE_INTERRUPT, DIGITIZER_EPSIZE, 1);
 #endif
 
+#ifdef RADIAL_CONTROLLER_ENABLE
+    /* Setup Radial Controller endpoint */
+    ConfigSuccess &= Endpoint_ConfigureEndpoint((RADIAL_CONTROLLER_IN_EPNUM | ENDPOINT_DIR_IN), EP_TYPE_INTERRUPT, RADIAL_CONTROLLER_EPSIZE, 1);
+#endif
+
     usb_device_state_set_configuration(USB_DeviceState == DEVICE_STATE_Configured, USB_Device_ConfigurationNumber);
 }
 
@@ -588,6 +593,12 @@ void send_digitizer(report_digitizer_t *report) {
 #endif
 }
 
+void send_radial_controller(report_radial_controller_t *report) {
+#ifdef RADIAL_CONTROLLER_ENABLE
+    send_report(RADIAL_CONTROLLER_IN_EPNUM, report, sizeof(report_radial_controller_t));
+#endif
+}
+
 /*******************************************************************************
  * sendchar
  ******************************************************************************/
diff --git a/tmk_core/protocol/report.h b/tmk_core/protocol/report.h
index 47bc4f2f2b..1a9aedf983 100644
--- a/tmk_core/protocol/report.h
+++ b/tmk_core/protocol/report.h
@@ -228,6 +228,11 @@ typedef int16_t joystick_axis_t;
 typedef int8_t joystick_axis_t;
 #endif
 
+typedef struct  {
+    uint16_t button : 1;
+    int16_t dial : 15;
+} __attribute__ ((packed)) report_radial_controller_t;
+
 typedef struct {
 #ifdef JOYSTICK_SHARED_EP
     uint8_t report_id;
diff --git a/tmk_core/protocol/usb_descriptor.c b/tmk_core/protocol/usb_descriptor.c
index 0e2e63ad8e..3da1861385 100644
--- a/tmk_core/protocol/usb_descriptor.c
+++ b/tmk_core/protocol/usb_descriptor.c
@@ -384,6 +384,38 @@ const USB_Descriptor_HIDReport_Datatype_t PROGMEM SharedReport[] = {
 };
 #endif
 
+#ifdef RADIAL_CONTROLLER_ENABLE
+const USB_Descriptor_HIDReport_Datatype_t PROGMEM RadialControllerReport[] = {
+    HID_RI_USAGE_PAGE(8, 0x01),             // Generic Desktop
+    HID_RI_USAGE(8, 0x0E),                  // System Multi-Axis Controller
+    HID_RI_COLLECTION(8, 0x01),             // Application
+        HID_RI_USAGE_PAGE(8, 0x0D),
+        HID_RI_USAGE(8, 0x21),              // Puck
+        HID_RI_COLLECTION(8, 0x00),         // Physical
+            HID_RI_USAGE_PAGE(8, 0x09),     // Buttons
+            HID_RI_USAGE(8, 0x01),          // Button 1
+            HID_RI_LOGICAL_MINIMUM(8, 0x00),
+            HID_RI_LOGICAL_MAXIMUM(8, 0x01),
+            HID_RI_REPORT_COUNT(8, 1),
+            HID_RI_REPORT_SIZE(8, 1),
+            HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_ABSOLUTE),
+
+            HID_RI_USAGE_PAGE(8, 0x01),     // Generic Desktop
+            HID_RI_USAGE(8, 0x37),          // Dial
+            HID_RI_UNIT_EXPONENT(8, 0x0F),
+            HID_RI_UNIT(8, 0x14),
+            HID_RI_PHYSICAL_MINIMUM(16, 0xF1F0),
+            HID_RI_PHYSICAL_MAXIMUM(16, 0x0E10),
+            HID_RI_LOGICAL_MINIMUM(16, 0xF1F0),
+            HID_RI_LOGICAL_MAXIMUM(16, 0x0E10),
+            HID_RI_REPORT_COUNT(8, 1),
+            HID_RI_REPORT_SIZE(8, 15),
+            HID_RI_INPUT(8, HID_IOF_DATA | HID_IOF_VARIABLE | HID_IOF_RELATIVE),
+        HID_RI_END_COLLECTION(0),
+    HID_RI_END_COLLECTION(0),
+};
+#endif
+
 #ifdef RAW_ENABLE
 const USB_Descriptor_HIDReport_Datatype_t PROGMEM RawReport[] = {
     HID_RI_USAGE_PAGE(16, RAW_USAGE_PAGE), // Vendor Defined
@@ -1032,6 +1064,46 @@ const USB_Descriptor_Configuration_t PROGMEM ConfigurationDescriptor = {
         .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
     },
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    /*
+     * Radial Controller
+     */
+    .RadialController_Interface = {
+        .Header = {
+            .Size               = sizeof(USB_Descriptor_Interface_t),
+            .Type               = DTYPE_Interface
+        },
+        .InterfaceNumber        = RADIAL_CONTROLLER_INTERFACE,
+        .AlternateSetting       = 0x00,
+        .TotalEndpoints         = 1,
+        .Class                  = HID_CSCP_HIDClass,
+        .SubClass               = HID_CSCP_NonBootSubclass,
+        .Protocol               = HID_CSCP_NonBootProtocol,
+        .InterfaceStrIndex      = NO_DESCRIPTOR
+    },
+    .RadialController_HID = {
+        .Header = {
+            .Size               = sizeof(USB_HID_Descriptor_HID_t),
+            .Type               = HID_DTYPE_HID
+        },
+        .HIDSpec                = VERSION_BCD(1, 1, 1),
+        .CountryCode            = 0x00,
+        .TotalReportDescriptors = 1,
+        .HIDReportType          = HID_DTYPE_Report,
+        .HIDReportLength        = sizeof(RadialControllerReport)
+    },
+    .RadialController_INEndpoint = {
+        .Header = {
+            .Size               = sizeof(USB_Descriptor_Endpoint_t),
+            .Type               = DTYPE_Endpoint
+        },
+        .EndpointAddress        = (ENDPOINT_DIR_IN | RADIAL_CONTROLLER_IN_EPNUM),
+        .Attributes             = (EP_TYPE_INTERRUPT | ENDPOINT_ATTR_NO_SYNC | ENDPOINT_USAGE_DATA),
+        .EndpointSize           = RADIAL_CONTROLLER_EPSIZE,
+        .PollingIntervalMS      = USB_POLLING_INTERVAL_MS
+    }
+#endif
 };
 
 /*
@@ -1180,6 +1252,12 @@ uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const
 
                     break;
 #endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+                case RADIAL_CONTROLLER_INTERFACE:
+                    Address = &ConfigurationDescriptor.RadialController_HID;
+                    Size    = sizeof(USB_HID_Descriptor_HID_t);
+                    break;
+#endif
             }
 
             break;
@@ -1235,6 +1313,12 @@ uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const
                     Address = &DigitizerReport;
                     Size    = sizeof(DigitizerReport);
                     break;
+#endif
+#ifdef RADIAL_CONTROLLER_ENABLE
+                case RADIAL_CONTROLLER_INTERFACE:
+                    Address = &RadialControllerReport;
+                    Size    = sizeof(RadialControllerReport);
+                    break;
 #endif
             }
 
diff --git a/tmk_core/protocol/usb_descriptor.h b/tmk_core/protocol/usb_descriptor.h
index 2469990f4d..a5165dee00 100644
--- a/tmk_core/protocol/usb_descriptor.h
+++ b/tmk_core/protocol/usb_descriptor.h
@@ -144,6 +144,13 @@ typedef struct {
     USB_HID_Descriptor_HID_t   Digitizer_HID;
     USB_Descriptor_Endpoint_t  Digitizer_INEndpoint;
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    // Radial COntroller HID Interface
+    USB_Descriptor_Interface_t RadialController_Interface;
+    USB_HID_Descriptor_HID_t   RadialController_HID;
+    USB_Descriptor_Endpoint_t  RadialController_INEndpoint;
+#endif
 } USB_Descriptor_Configuration_t;
 
 /*
@@ -193,6 +200,10 @@ enum usb_interfaces {
 #if defined(DIGITIZER_ENABLE) && !defined(DIGITIZER_SHARED_EP)
     DIGITIZER_INTERFACE,
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    RADIAL_CONTROLLER_INTERFACE,
+#endif
     TOTAL_INTERFACES
 };
 
@@ -267,6 +278,10 @@ enum usb_endpoints {
 #        define DIGITIZER_IN_EPNUM SHARED_IN_EPNUM
 #    endif
 #endif
+
+#ifdef RADIAL_CONTROLLER_ENABLE
+    RADIAL_CONTROLLER_IN_EPNUM = NEXT_EPNUM,
+#endif
 };
 
 #ifdef PROTOCOL_LUFA
@@ -293,5 +308,6 @@ enum usb_endpoints {
 #define CDC_EPSIZE 16
 #define JOYSTICK_EPSIZE 8
 #define DIGITIZER_EPSIZE 8
+#define RADIAL_CONTROLLER_EPSIZE 8
 
 uint16_t get_usb_descriptor(const uint16_t wValue, const uint16_t wIndex, const uint16_t wLength, const void** const DescriptorAddress);
