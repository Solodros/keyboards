diff --git a/quantum/dynamic_keymap.c b/quantum/dynamic_keymap.c
index 953225843e..c3d0f9c2a2 100644
--- a/quantum/dynamic_keymap.c
+++ b/quantum/dynamic_keymap.c
@@ -130,6 +130,16 @@ _Static_assert(DYNAMIC_KEYMAP_EEPROM_MAX_ADDR >= DYNAMIC_KEYMAP_MACRO_EEPROM_ADD
 #    define DYNAMIC_KEYMAP_MACRO_EEPROM_SIZE (DYNAMIC_KEYMAP_EEPROM_MAX_ADDR - DYNAMIC_KEYMAP_MACRO_EEPROM_ADDR + 1)
 #endif
 
+#ifdef VIAL_TAP_DANCE_ENABLE
+__attribute__((weak)) void vial_tap_dance_reset_user(uint8_t index, vial_tap_dance_entry_t *entry) {}
+#endif
+#ifdef VIAL_COMBO_ENABLE
+__attribute__((weak)) void vial_combo_reset_user(uint8_t index, vial_combo_entry_t *entry) {}
+#endif
+#ifdef VIAL_KEY_OVERRIDE_ENABLE
+__attribute__((weak)) void vial_key_override_reset_user(uint8_t index, vial_key_override_entry_t *entry) {}
+#endif
+
 uint8_t dynamic_keymap_get_layer_count(void) {
     return DYNAMIC_KEYMAP_LAYER_COUNT;
 }
@@ -292,24 +302,36 @@ void dynamic_keymap_reset(void) {
 #endif
 
 #ifdef VIAL_TAP_DANCE_ENABLE
-    vial_tap_dance_entry_t td = { KC_NO, KC_NO, KC_NO, KC_NO, TAPPING_TERM };
+    vial_tap_dance_entry_t td;
     for (size_t i = 0; i < VIAL_TAP_DANCE_ENTRIES; ++i) {
+        td.on_tap              = KC_NO;
+        td.on_hold             = KC_NO;
+        td.on_double_tap       = KC_NO;
+        td.on_tap_hold         = KC_NO;
+        td.custom_tapping_term = TAPPING_TERM;
+        vial_tap_dance_reset_user(i, &td);
         dynamic_keymap_set_tap_dance(i, &td);
     }
 #endif
 
 #ifdef VIAL_COMBO_ENABLE
-    vial_combo_entry_t combo = { 0 };
-    for (size_t i = 0; i < VIAL_COMBO_ENTRIES; ++i)
+    vial_combo_entry_t combo;
+    for (size_t i = 0; i < VIAL_COMBO_ENTRIES; ++i) {
+        memset(&combo, 0, sizeof(vial_combo_entry_t));
+        vial_combo_reset_user(i, &combo);
         dynamic_keymap_set_combo(i, &combo);
+    }
 #endif
 
 #ifdef VIAL_KEY_OVERRIDE_ENABLE
-    vial_key_override_entry_t ko = { 0 };
-    ko.layers = ~0;
-    ko.options = vial_ko_option_activation_negative_mod_up | vial_ko_option_activation_required_mod_down | vial_ko_option_activation_trigger_down;
-    for (size_t i = 0; i < VIAL_KEY_OVERRIDE_ENTRIES; ++i)
+    vial_key_override_entry_t ko;
+    for (size_t i = 0; i < VIAL_KEY_OVERRIDE_ENTRIES; ++i) {
+        memset(&ko, 0, sizeof(vial_key_override_entry_t));
+        ko.layers  = ~0;
+        ko.options = vial_ko_option_activation_negative_mod_up | vial_ko_option_activation_required_mod_down | vial_ko_option_activation_trigger_down;
+        vial_key_override_reset_user(i, &ko);
         dynamic_keymap_set_key_override(i, &ko);
+    }
 #endif
 
 #ifdef VIAL_ENABLE
diff --git a/quantum/dynamic_keymap.h b/quantum/dynamic_keymap.h
index 94532052dd..c55abf7317 100644
--- a/quantum/dynamic_keymap.h
+++ b/quantum/dynamic_keymap.h
@@ -41,14 +41,17 @@ void dynamic_keymap_set_qmk_settings(uint16_t offset, uint8_t value);
 #ifdef VIAL_TAP_DANCE_ENABLE
 int dynamic_keymap_get_tap_dance(uint8_t index, vial_tap_dance_entry_t *entry);
 int dynamic_keymap_set_tap_dance(uint8_t index, const vial_tap_dance_entry_t *entry);
+void vial_tap_dance_reset_user(uint8_t index, vial_tap_dance_entry_t *entry);
 #endif
 #ifdef VIAL_COMBO_ENABLE
 int dynamic_keymap_get_combo(uint8_t index, vial_combo_entry_t *entry);
 int dynamic_keymap_set_combo(uint8_t index, const vial_combo_entry_t *entry);
+void vial_combo_reset_user(uint8_t index, vial_combo_entry_t *entry);
 #endif
 #ifdef VIAL_KEY_OVERRIDE_ENABLE
 int dynamic_keymap_get_key_override(uint8_t index, vial_key_override_entry_t *entry);
 int dynamic_keymap_set_key_override(uint8_t index, const vial_key_override_entry_t *entry);
+void vial_key_override_reset_user(uint8_t index, vial_key_override_entry_t *entry);
 #endif
 void     dynamic_keymap_reset(void);
 // These get/set the keycodes as stored in the EEPROM buffer
